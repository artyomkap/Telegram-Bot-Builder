import asyncio
import logging
import os
import time
from pathlib import Path
from datetime import datetime
import uuid
import aiofiles
from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from sqlalchemy.ext.asyncio import AsyncSession
from telethon import TelegramClient, functions
from telethon.errors import ChannelPrivateError, ChatGuestSendForbiddenError, SlowModeWaitError, PeerIdInvalidError, \
    ChatWriteForbiddenError, FloodWaitError, SessionPasswordNeededError
from telethon.sessions import StringSession
from states import states
import config
from sqlalchemy import select
from database.models import User, Spammer, SessionData
from middlewares.user_middleware import AuthorizeMiddleware
from keyboards import spammer_parser_keyboard as kb

router = Router()  # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router.message.middleware(AuthorizeMiddleware())
router.callback_query.middleware(AuthorizeMiddleware())

logger = logging.getLogger(__name__)
SESSION_NAME = "tg_session"
task_storage = {}
PHOTO_DIR = "photos"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
NAMES_FILE = Path("services/parser/names.txt")
ENDINGS_FILE = Path("services/parser/endings.txt")
active_clients = {}


class AuthUser(StatesGroup):
    api_id = State()
    api_hash = State()
    phone = State()
    code_callback = State()
    password = State()

    texts = {
        "AuthUser:api_id": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à api_id:",
        "AuthUser:api_hash": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à api_hash:",
        "AuthUser:phone": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "AuthUser:code_callback": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏:",
        "AuthUser:password": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å: ",
    }


async def send_telegram_message(bot: Bot, chat_id: int, message: str, edit_message_id: int = None):
    kb = [
        [InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥', callback_data='stop_parsing')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    try:
        if edit_message_id:
            try:
                await bot.edit_message_text(chat_id=chat_id, message_id=edit_message_id, text=message,
                                            disable_web_page_preview=True, reply_markup=keyboard)
            except Exception as e:
                if "message can't be edited" in str(e):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await bot.send_message(chat_id, message, disable_web_page_preview=True, reply_markup=keyboard)
                else:
                    raise e
        else:
            await bot.send_message(chat_id, message, disable_web_page_preview=True, reply_markup=keyboard)
    except Exception as e:
        print(f"Error sending Telegram message: {e}")


import asyncio
import logging
from telethon import TelegramClient, functions


async def run_parser(bot, chat_id: int, message_id: int, client: TelegramClient):
    logging.info("–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    found_chats = set()
    output_message = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:\n"
    update_counter = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç—É

    try:
        if not client.is_connected():
            await client.connect()
            logging.info("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
        with open("services/parser/output.txt", "w", encoding="utf-8") as file:
            file.write("")

        try:
            with open("services/parser/names.txt", "r", encoding="utf-8") as file:
                names = file.read().splitlines()
            with open("services/parser/endings.txt", "r", encoding="utf-8") as file:
                ends = file.read().splitlines()
        except FileNotFoundError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return

        with open("services/parser/output.txt", "a", encoding="utf-8") as file:
            for title in names:
                for end in ends:
                    name = (title + end).strip()
                    if not name:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
                    if asyncio.current_task().cancelled():
                        logging.info("–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                        return

                    try:
                        request = await client(functions.contacts.SearchRequest(q=name, limit=10))
                        for channel in request.chats:
                            if channel.megagroup and channel.username:
                                username = channel.username.lower()

                                if username not in found_chats:
                                    found_chats.add(username)
                                    chat_link = f"t.me/{channel.username}"
                                    file.write(chat_link + "\n")
                                    file.flush()  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å—Ä–∞–∑—É

                                    output_message += chat_link + "\n"
                                    update_counter += 1

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É —Ä–∞–∑ –≤ 5 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                                    if update_counter % 5 == 0:
                                        await send_telegram_message(bot, chat_id, output_message, message_id)

                                    # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
                                    await asyncio.sleep(0.1)

                    except Exception as e:
                        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ {name}: {e}")

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —á–∞—Ç—ã
        if update_counter % 5 != 0:
            await send_telegram_message(bot, chat_id, output_message, message_id)

    except Exception as e:
        logging.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ run_parser: {e}")

    return list(found_chats), output_message


async def read_file(file_path: Path) -> str:
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if file_path.exists():
        async with aiofiles.open(file_path, "r", encoding="utf-8") as file:
            content = await file.readlines()
        return ", ".join(line.strip() for line in content if line.strip())
    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"


@router.message(F.text == "üìÑ –ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–æ–≤")
async def parser(message: Message, user: User):
    await message.answer(text='üìÑ –ú–µ–Ω—é –ü–∞—Ä—Å–µ—Ä–∞\n'
                              '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb.parser_menu)


@router.callback_query(F.data == 'back_to_spam_parse_menu')
async def back_to_spam_parse_menu(call: CallbackQuery, user: User):
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=kb.spammer_parser_menu)


@router.callback_query(F.data == 'change_names')
async def change_names(call: CallbackQuery, user: User, state: FSMContext):
    names_list = await read_file(NAMES_FILE)
    await call.message.edit_text(
        text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n'
             f'–ò–º–µ–Ω–∞, –∏–º–µ—é—â–∏–µ—Å—è —Å–µ–π—á–∞—Å: {names_list}'
    )
    await state.set_state(states.ParserStates.begin_text)


@router.message(StateFilter(states.ParserStates.begin_text))
async def begin_text(message: Message, user: User, state: FSMContext):
    begin_text = message.text.split(',')  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∑–∞–ø—è—Ç—ã–º

    file_path = Path("services/parser/names.txt")  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

    async with aiofiles.open(file_path, "w", encoding="utf-8") as file:
        await file.writelines(f"{name.strip()}\n" for name in begin_text if name.strip())

    await message.answer("–°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª.", reply_markup=kb.parser_menu)


@router.callback_query(F.data == 'change_endings')
async def change_endings(call: CallbackQuery, user: User, state: FSMContext):
    endings_list = await read_file(ENDINGS_FILE)
    await call.message.edit_text(
        text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n'
             f'–û–∫–æ–Ω—á–∞–Ω–∏—è, –∏–º–µ—é—â–∏–µ—Å—è —Å–µ–π—á–∞—Å: {endings_list}'
    )
    await state.set_state(states.ParserStates.end_text)


@router.message(StateFilter(states.ParserStates.end_text))
async def end_text(message: Message, user: User, state: FSMContext):
    end_text = message.text.split(',')  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∑–∞–ø—è—Ç—ã–º

    file_path = Path("services/parser/endings.txt")  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

    async with aiofiles.open(file_path, "w", encoding="utf-8") as file:
        await file.writelines(f"{name.strip()}\n" for name in end_text if name.strip())

    await message.answer("–°–ø–∏—Å–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª.", reply_markup=kb.parser_menu)


@router.callback_query(F.data == 'start_parsing')
async def start_parsing(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–ù–∞—á–∏–Ω–∞—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    bot = call.bot
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    await state.set_state(AuthUser.phone)


@router.message(StateFilter(AuthUser.phone))
async def process_phone_number(message: types.Message, state: FSMContext, session: AsyncSession):
    phone_number = message.text.strip()
    user_id = message.from_user.id

    if not phone_number.startswith("+") or not phone_number[1:].isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")
        return

    await state.update_data(phone_number=phone_number)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
    existing_session = await session.execute(
        select(SessionData).where(SessionData.phone == phone_number)
    )
    existing_session = existing_session.scalars().first()

    if existing_session:
        client = TelegramClient(
            StringSession(existing_session.session_string),
            config.api_id, config.api_hash,
            device_model="GNU/Linux 6.8.0-36-generic x86_64",
            system_version="Ubuntu 24.04 LTS",
            app_version="1.38.1"
        )
        await client.connect()
        if not await client.is_user_authorized():
            sent_code = await client.send_code_request(phone_number)
            await message.answer(AuthUser.texts["AuthUser:code_callback"])
            active_clients[user_id] = client
            await state.update_data(phone_code_hash=sent_code.phone_code_hash)
            await state.set_state(AuthUser.code_callback)
        else:
            new_message = await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥")
            bot = message.bot
            chat_id = message.chat.id
            message_id = new_message.message_id
            parsing_task = asyncio.create_task(run_parser(bot, chat_id, message_id, client))
            task_storage[1] = parsing_task
            await state.clear()
            return

    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    client = TelegramClient(
        StringSession(), config.api_id, config.api_hash,
        device_model="GNU/Linux 6.8.0-36-generic x86_64",
        system_version="Ubuntu 24.04 LTS",
        app_version="1.38.1"
    )

    try:
        await client.connect()
        if not await client.is_user_authorized():
            sent_code = await client.send_code_request(phone_number)
            await message.answer(AuthUser.texts["AuthUser:code_callback"])
            active_clients[user_id] = client
            await state.update_data(phone_code_hash=sent_code.phone_code_hash)
            await state.set_state(AuthUser.code_callback)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        session_string = client.session.save()
        async with session.begin():
            existing_session = await session.execute(
                select(SessionData).where(SessionData.phone == phone_number)
            )
            existing_session = existing_session.scalars().first()

            if existing_session:
                existing_session.session_string = session_string
            else:
                phone_number = str(phone_number)
                new_session = SessionData(phone=phone_number, session_string=session_string)
                session.add(new_session)

        new_message = await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥")
        bot = message.bot
        chat_id = message.chat.id
        message_id = new_message.message_id
        parsing_task = asyncio.create_task(run_parser(bot, chat_id, message_id, client))
        task_storage[1] = parsing_task
        await state.clear()
    except FloodWaitError as e:
        logger.error(f"FloodWaitError: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥.")
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {user_id}: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /auth.")
        await state.clear()


@router.message(AuthUser.code_callback)
async def process_code(message: types.Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id
    code = message.text.strip()
    data = await state.get_data()
    phone_code_hash = data.get("phone_code_hash")
    phone_number = data.get("phone_number")
    client = active_clients.get(user_id)
    if client is None:
        logger.info(f"[INFO] –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (user_id: {user_id})")
        await message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await client.sign_in(phone=phone_number, code=code, phone_code_hash=phone_code_hash)
        logger.info(f"[INFO] user_id: {user_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session_string = client.session.save()
        async with session.begin():
            existing_session = await session.execute(
                select(SessionData).where(SessionData.phone == phone_number)
            )
            existing_session = existing_session.scalars().first()

            if existing_session:
                existing_session.session_string = session_string
            else:
                phone_number = str(phone_number)
                new_session = SessionData(phone=phone_number, session_string=session_string)
                session.add(new_session)

            await session.commit()

        new_message = await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥")
        bot = message.bot
        chat_id = message.chat.id
        message_id = new_message.message_id
        parsing_task = asyncio.create_task(run_parser(bot, chat_id, message_id, client))  # Store the task
        task_storage[1] = parsing_task
        await state.clear()
    except SessionPasswordNeededError:
        logger.info(f"[INFO] –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è user_id: {user_id}")
        await message.answer(AuthUser.texts["AuthUser:password"])
        await state.set_state(AuthUser.password)
    except Exception as e:
        if "The confirmation code has expired" in str(e):
            await message.answer("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫")
            del active_clients[user_id]
            await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {user_id}: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}")
        del active_clients[user_id]
        await state.clear()


@router.message(StateFilter(AuthUser.password))
async def process_password(message: Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id
    password = message.text.strip()
    data = await state.get_data()
    phone_number = data.get("phone_number")

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    client = active_clients.get(user_id)

    if client is None:
        logger.info(f"[INFO] –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (user_id: {user_id})")
        await message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        del active_clients[user_id]
        await state.clear()
        return

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º
        await client.sign_in(password=password)
        logger.info(f"[INFO] user_id: {user_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É —Å –ø–∞—Ä–æ–ª–µ–º.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session_string = client.session.save()
        async with session:
            new_session = SessionData(phone=phone_number, session_string=session_string)
            session.add(new_session)
            await session.commit()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
        new_message = await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥")
        bot = message.bot
        chat_id = message.chat.id
        message_id = new_message.message_id
        parsing_task = asyncio.create_task(run_parser(bot, chat_id, message_id, client))  # Store the task
        task_storage[1] = parsing_task
        await state.clear()
        await client.disconnect()
    except Exception as e:
        if "The confirmation code has expired" in str(e):
            await message.answer("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –ø–∞—Ä–æ–ª–µ–º: {user_id}: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –ø–∞—Ä–æ–ª–µ–º: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        await client.disconnect()
        # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del active_clients[user_id]
        await state.clear()


@router.callback_query(F.data == 'chats')
async def chats(call: CallbackQuery, user: User):
    chats = await read_file(Path('services/parser/output.txt'))
    await call.message.answer(text=f'–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:\n\n{chats}', reply_markup=kb.chats_menu)


@router.callback_query(F.data == 'stop_parsing')
async def stop_parsing(call: CallbackQuery, state: FSMContext):
    task = task_storage.get(1)
    if task:
        task.cancel()
        await call.message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
        del active_clients[call.from_user.id]
        await state.clear()
    else:
        await call.message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")


@router.callback_query(F.data == 'download_tg_folder')
async def download_tg_folder_handler(call: CallbackQuery, state: FSMContext):
    file_path = "services/parser/output.txt"
    try:
        if not os.path.exists(file_path) or os.stat(file_path).st_size == 0:  # Check if file exists and is not empty
            await call.message.answer("–§–∞–π–ª —Å —á–∞—Ç–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.")
            return

        await call.message.answer_document(types.FSInputFile(file_path),
                                           caption="–§–∞–π–ª —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏")  # Send the file
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
