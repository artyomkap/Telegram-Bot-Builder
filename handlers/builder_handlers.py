import asyncio
import json
import logging
import os
import random
import signal
import string
import subprocess
import sys
import time
import uuid
from typing import Optional
from handlers import control_made_bot
import requests
from aiogram import types, Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, \
    BotCommandScopeDefault
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fastapi.responses import JSONResponse
from sqlalchemy import and_
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
import os
import sys
import subprocess
import logging


import utils
from database import crud
from database.models import User, Made_Bots, Mailing
from keyboards import main_keyboard, builder_keyboard
from middlewares.user_middleware import AuthorizeMiddleware
from states import states

bot_instances = {}
router = Router()  # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router.message.middleware(AuthorizeMiddleware())
router.callback_query.middleware(AuthorizeMiddleware())
PHOTO_DIR = "photos"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
os.makedirs(PHOTO_DIR, exist_ok=True)



async def bot_start(new_bot):
    if new_bot.bot_id in bot_instances:
        logging.info(f"{new_bot.bot_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    bot_path = os.path.join("created_bots", str(new_bot.bot_id), "main.py")
    log_file = os.path.join("created_bots", str(new_bot.bot_id), "bot.log")

    env = os.environ.copy()
    env["PYTHONPATH"] = os.path.abspath(os.path.dirname(__file__))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH

    with open(log_file, "w") as log:
        process = subprocess.Popen(
            [sys.executable, bot_path],
            stdout=log,
            stderr=log,
            start_new_session=True,  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–æ–º–±–∏-–ø—Ä–æ—Ü–µ—Å—Å–∞
            env=env  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        )

    logging.info(f"–ë–æ—Ç {new_bot.bot_name} –∑–∞–ø—É—â–µ–Ω —Å PID {process.pid}.")
    new_bot.process = str(process.pid)
    new_bot.is_working = True


async def stop_bot(new_bot):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
    pid = int(new_bot.process)  # Convert PID to integer
    os.kill(pid, signal.SIGTERM)  # Or signal.SIGKILL if needed
    new_bot.process = None  # Clear the PID in the database
    new_bot.is_working = False
    logging.info(f"–ë–æ—Ç {new_bot.bot_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def load_bot_page(session: AsyncSession, bot_id, bot: Bot, user: User):
    async with session:
        new_bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        new_bot = new_bot_query.scalars().first()
        keyboard = await builder_keyboard.get_bot_settings_kb(new_bot)
        # domain_query = await session.execute(select(Domains).where(Domains.id == new_bot.domain_id))
        # domain = domain_query.scalars().first()
        buttons_text = ""
        if new_bot.buttons:
            try:
                buttons_data = json.loads(new_bot.buttons)
                for i, button in enumerate(buttons_data):
                    buttons_text += f"{button.get('text', '–ö–Ω–æ–ø–∫–∞')} ({button.get('type', 'text')})\n"
            except json.JSONDecodeError:
                buttons_text = "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫"
        else:
            buttons_text = "–ö–Ω–æ–ø–æ–∫ –Ω–µ—Ç"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        start_text = new_bot.start_message or "–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        text = (f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {new_bot.bot_id}\n\n'
                f'<b>ü§ñ –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{new_bot.bot_name}\n'
                f'<b>üåê –î–æ–º–µ–Ω:</b> {new_bot.web_app_link}\n'
                f'<b>üí¨ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ WebApp:</b> {new_bot.web_app_button}\n\n'
                f'<b>üñ• –ö–Ω–æ–ø–∫–∏:</b> <pre>{buttons_text}</pre>\n\n'
                f'<b>üìù–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b> <pre>{start_text}</pre>\n'
                f'–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–∂–∏–º–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å!')

        await bot.send_message(user.tg_id, text, parse_mode="HTML", reply_markup=keyboard)


@router.message(F.text == 'ü§ñ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–æ–≤')
async def bots_constructor(message: Message, session: AsyncSession, user: User):
    kb = await builder_keyboard.get_bot_menu_kb(session, user)
    await message.answer('ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ', reply_markup=kb)


@router.callback_query(F.data == 'create_bot')
async def create_bot(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    if call.data == 'create_bot':
        await call.message.edit_text('üíÅ‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è WebApp')
        await state.set_state(states.NewBotState.web_app_link)


@router.message(StateFilter(states.NewBotState.web_app_link))
async def create_bot_webapp(message: Message, state: FSMContext, session: AsyncSession, user: User):
    web_app_link = message.text
    await state.update_data(web_app_link=web_app_link)
    await message.answer('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞', reply_markup=builder_keyboard.back_to_bot)
    await state.set_state(states.NewBotState.bot_token)


@router.message(StateFilter(states.NewBotState.bot_token))
async def create_bot_token(message: Message, state: FSMContext, session: AsyncSession, user: User):
    bot_token = message.text
    await state.update_data(bot_token=bot_token)
    await message.answer(text='–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–∫–æ–ª–æ 30 —Å–µ–∫—É–Ω–¥).')
    async with session:
        max_bot_id_query = await session.execute(select(func.max(Made_Bots.id)))
        max_id = max_bot_id_query.scalar() or 0
        new_id = max_id + 1
        letters = string.ascii_lowercase
        name = ''.join(random.choice(letters) for i in range(5))
        new_bot = Made_Bots(
            bot_id="bot_" + name,
            bot_name='bot_' + name,  # Correct: Convert new_bot_id to string
            bot_token=bot_token,
            user_tg_id=user.tg_id,
        )

        data = await state.get_data()
        web_app_link = data.get('web_app_link')
        if web_app_link:
            new_bot.web_app_link = web_app_link

        session.add(new_bot)
        await session.commit()
        await session.refresh(new_bot)
        await asyncio.sleep(1)
        async with session:
            await utils.create_project_structure(new_bot.bot_id, new_bot.id, session)
            await bot_start(new_bot)
            await session.commit()
            time.sleep(25)
            await crud.copy_bot_data(new_bot.bot_id, new_bot.id)
            await stop_bot(new_bot)
            await session.commit()
            await message.answer(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                                 f"üÜî ID:{new_bot.bot_id}",
                                 reply_markup=await builder_keyboard.go_to_bot_setting(new_bot))


@router.callback_query(F.data.startswith('bot_settings|'))
async def bot_settings(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)
    async with session:
        new_bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        new_bot = new_bot_query.scalars().first()
        keyboard = await builder_keyboard.get_bot_settings_kb(new_bot)
        buttons_text = ""
        if new_bot.buttons:
            try:
                buttons_data = json.loads(new_bot.buttons)
                for i, button in enumerate(buttons_data):
                    buttons_text += f"{button.get('text', '–ö–Ω–æ–ø–∫–∞')} ({button.get('type', 'text')})\n"
            except json.JSONDecodeError:
                buttons_text = "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫"
        else:
            buttons_text = "–ö–Ω–æ–ø–æ–∫ –Ω–µ—Ç"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        start_text = new_bot.start_message or "–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        text = (f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {new_bot.bot_id}\n\n'
                f'<b>ü§ñ –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{new_bot.bot_name}\n'
                f'<b>üåê –î–æ–º–µ–Ω:</b> {new_bot.web_app_link}\n'
                f'<b>üí¨ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ WebApp:</b> {new_bot.web_app_button}\n\n'
                f'<b>üñ• –ö–Ω–æ–ø–∫–∏:</b> <pre>{buttons_text}</pre>\n\n'
                f'<b>üìù–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b> <pre>{start_text}</pre>\n'
                f'–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–∂–∏–º–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å!')

        await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data.startswith('bot_answers|'))
async def bot_answer_settings(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)
    await call.message.edit_text(text='üíÅ‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=builder_keyboard.bot_answers_setting)


@router.callback_query(F.data == 'change_message_bot')
async def change_message_bot(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        text='üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π <b>—Å—Ç–∞—Ä—Ç–æ–≤—ã–π</b> —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞. '
             '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n'
             '<i>(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)</i>\n\n'
             'üîÑ –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n\n'
             'üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: \n'
             ' ‚îî {first_name} - –∏–º—è\n'
             ' ‚îî {last_name} - —Ñ–∞–º–∏–ª–∏—è  \n'
             ' ‚îî {username} - —é–∑–µ—Ä–Ω–µ–π–º –±–µ–∑ @\n'
             ' ‚îî {@username} - —é–∑–µ—Ä–Ω–µ–π–º —Å @\n'
             ' ‚îî {telegram_id} - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
             'üé≤ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n'
             ' ‚îî {random(x,y)} - —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç x –¥–æ y\n'
             ' ‚îî {1: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ} - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 1\n'
             ' ‚îî {2: ^1 * 2} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 1\n\n'
             '<i>*–ü—É—Å—Ç—ã–µ –ø–æ–ª—è –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É</i>',
        parse_mode='HTML',
        reply_markup=builder_keyboard.back_to_bot
    )
    await state.set_state(states.NewBotState.start_text)


@router.message(StateFilter(states.NewBotState.start_text))
async def change_message_bot_text(message: Message, session: AsyncSession, state: FSMContext):
    bot_id = int((await state.get_data()).get('bot_id'))
    text = message.caption if message.photo else message.text

    photo_path = None
    if message.photo:
        file_id = message.photo[-1].file_id
        file_info = await message.bot.get_file(file_id)
        file_ext = file_info.file_path.split('.')[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        unique_filename = f"{uuid.uuid4()}.{file_ext}"
        photo_path = os.path.join(PHOTO_DIR, unique_filename)

        await message.bot.download_file(file_info.file_path, photo_path)

    async with session:
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()
        bot_made.start_message = text
        bot_made.start_photo = photo_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ –ë–î
        await session.commit()
    await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
    await message.answer("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=main_keyboard.main_menu)
    await state.clear()


@router.callback_query(F.data == 'back_to_bot_choice')
async def back_to_bot_choice(call: CallbackQuery, user: User, state: FSMContext):
    if call.data == 'back_to_bot_choice':
        await call.message.edit_text(text='üíÅ‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=builder_keyboard.bot_answers_setting)


@router.callback_query(F.data == 'manage_buttons_bot')
async def manage_buttons_bot(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    if call.data == 'manage_buttons_bot':
        bot_id = (await state.get_data()).get('bot_id')
        async with session:
            bot = await session.get(Made_Bots, bot_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            kb = await builder_keyboard.get_manage_buttons_menu(bot)
            if bot and bot.buttons:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏
                buttons_data = json.loads(bot.buttons)  # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–Ω–æ–ø–∫–∞—Ö
                buttons_text = ""
                for i, button in enumerate(buttons_data):
                    if button['type'] == 'text':
                        buttons_text += f"{i + 1}. <code>{button['text']}</code>\n"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                await call.message.edit_text(
                    text='<b> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:</b>\n'
                         ' ‚îî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞\n\n'
                         '<b>‚å®Ô∏è –¢–∏–ø—ã –∫–Ω–æ–ø–æ–∫:</b>\n'
                         ' ‚îî üí¨ –¢–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî üîó –°—Å—ã–ª–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–µ\n'
                         ' ‚îî üåê WebApp - –≤–µ–±-–∞–ø–ø\n\n'
                         '<b>–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:</b>\n' + buttons_text,  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    reply_markup=kb,
                    parse_mode='HTML'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                )
            else:
                await call.message.edit_text(
                    text='<b> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:</b>\n'
                         ' ‚îî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞\n\n'
                         '<b>‚å®Ô∏è –¢–∏–ø—ã –∫–Ω–æ–ø–æ–∫:</b>\n'
                         ' ‚îî üí¨ –¢–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî üîó –°—Å—ã–ª–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–µ\n'
                         ' ‚îî üåê WebApp - –≤–µ–±-–∞–ø–ø\n\n'
                         '<b>–£ –±–æ—Ç–∞ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫.</b>',  # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫
                    reply_markup=kb,
                    parse_mode="HTML"
                )


@router.callback_query(F.data.startswith('edit_button|'))
async def edit_chosen_button(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    button_index = int(call.data.split('|')[1])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏

    data = await state.get_data()
    bot_id = data.get('bot_id')

    bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
    bot_made = bot_query.scalars().first()

    if not bot_made:
        return await call.answer("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

    buttons_data = json.loads(bot_made.buttons)

    if button_index >= len(buttons_data):
        return await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)

    button = buttons_data[button_index]

    await state.update_data(editing_button_index=button_index, buttons_data=buttons_data)
    if button.get('type') == 'üí¨' or '‚úèÔ∏è' or 'üîî':
        text = f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:\n\n" \
               f"–¢–∏–ø –∫–Ω–æ–ø–∫–∏: {button.get('type')}\n" \
               f"üìù –¢–µ–∫—Å—Ç: {button.get('text', '–ù–µ –∑–∞–¥–∞–Ω')}\n" \
               f"üí¨ –û—Ç–≤–µ—Ç: {button.get('answer', '–ù–µ –∑–∞–¥–∞–Ω')}\n" \
               f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton(text="üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="edit_answer")] if "answer" in button else [],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
        await call.message.edit_text(text, reply_markup=keyboard)
    elif button.get('type') == 'üîó':
        text = f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:\n\n" \
               f"–¢–∏–ø –∫–Ω–æ–ø–∫–∏: {button.get('type')}\n" \
               f"üìù –¢–µ–∫—Å—Ç: {button.get('text', '–ù–µ –∑–∞–¥–∞–Ω')}\n" \
               f"üîó –°—Å—ã–ª–∫–∞: {button.get('url', '–ù–µ –∑–∞–¥–∞–Ω')}\n" \
               f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton(text="üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="edit_url")] if "url" in button else [],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
        await call.message.edit_text(text, reply_markup=keyboard)
    elif button.get('type') == 'üåê':
        text = f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:\n\n" \
               f"–¢–∏–ø –∫–Ω–æ–ø–∫–∏: {button.get('type')}\n" \
               f"üìù –¢–µ–∫—Å—Ç: {button.get('text', '–ù–µ –∑–∞–¥–∞–Ω')}\n" \
               f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
        await call.message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data == 'edit_text')
async def edit_text(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 25 —Å–∏–º–≤–æ–ª–æ–≤):',
                                 reply_markup=builder_keyboard.back_to_bot)
    await state.set_state(states.NewBotState.change_button_text)


@router.callback_query(F.data == 'edit_answer')
async def edit_answer(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏\n'
                                      '(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏):',
                                 reply_markup=builder_keyboard.back_to_bot)
    await state.set_state(states.NewBotState.change_button_answer)


@router.callback_query(F.data == 'edit_url')
async def edit_url(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text='üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:',
                                 reply_markup=builder_keyboard.back_to_bot)
    await state.set_state(states.NewBotState.change_button_url)


@router.callback_query(F.data == 'cancel_edit')
async def cancel_edit(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    if call.data == 'cancel_edit':
        bot_id = (await state.get_data()).get('bot_id')
        async with session:
            bot = await session.get(Made_Bots, bot_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            kb = await builder_keyboard.get_manage_buttons_menu(bot)
            if bot and bot.buttons:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏
                buttons_data = json.loads(bot.buttons)  # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–Ω–æ–ø–∫–∞—Ö
                buttons_text = ""
                for i, button in enumerate(buttons_data):
                    if button['type'] == 'text':
                        buttons_text += f"{i + 1}. <code>{button['text']}</code>\n"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                await call.message.edit_text(
                    text='<b> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:</b>\n'
                         ' ‚îî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞\n\n'
                         '<b>‚å®Ô∏è –¢–∏–ø—ã –∫–Ω–æ–ø–æ–∫:</b>\n'
                         ' ‚îî üí¨ –¢–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî üîó –°—Å—ã–ª–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–µ\n'
                         ' ‚îî üåê WebApp - –≤–µ–±-–∞–ø–ø\n\n'
                         '<b>–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:</b>\n' + buttons_text,  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    reply_markup=kb,
                    parse_mode='HTML'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                )
            else:
                await call.message.edit_text(
                    text='<b> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏:</b>\n'
                         ' ‚îî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞\n\n'
                         '<b>‚å®Ô∏è –¢–∏–ø—ã –∫–Ω–æ–ø–æ–∫:</b>\n'
                         ' ‚îî üí¨ –¢–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                         ' ‚îî üîó –°—Å—ã–ª–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–µ\n'
                         ' ‚îî üåê WebApp - –≤–µ–±-–∞–ø–ø\n\n'
                         '<b>–£ –±–æ—Ç–∞ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫.</b>',  # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫
                    reply_markup=kb,
                    parse_mode="HTML"
                )


@router.message(states.NewBotState.change_button_text)
async def save_button_text(message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    bot_id = data.get('bot_id')
    button_index = data.get('editing_button_index')
    buttons_data = data.get('buttons_data')

    buttons_data[button_index]['text'] = message.text[:25]

    bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
    bot_made = bot_query.scalars().first()
    bot_made.buttons = json.dumps(buttons_data)
    await session.commit()
    await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()


@router.message(states.NewBotState.change_button_answer)
async def save_button_answer(message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    bot_id = data.get('bot_id')
    button_index = data.get('editing_button_index')
    buttons_data = data.get('buttons_data')
    text = message.caption if message.photo else message.text

    photo_path = None
    if message.photo:
        file_id = message.photo[-1].file_id
        file_info = await message.bot.get_file(file_id)
        file_ext = file_info.file_path.split('.')[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        unique_filename = f"{uuid.uuid4()}.{file_ext}"
        photo_path = os.path.join(PHOTO_DIR, unique_filename)

        await message.bot.download_file(file_info.file_path, photo_path)
    buttons_data[button_index]['answer'] = text
    buttons_data[button_index]['photo'] = photo_path
    bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
    bot_made = bot_query.scalars().first()
    bot_made.buttons = json.dumps(buttons_data)
    await session.commit()
    await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()


@router.message(states.NewBotState.change_button_url)
async def save_button_url(message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    bot_id = data.get('bot_id')
    button_index = data.get('editing_button_index')
    buttons_data = data.get('buttons_data')

    buttons_data[button_index]['url'] = message.text

    bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
    bot_made = bot_query.scalars().first()
    bot_made.buttons = json.dumps(buttons_data)
    await session.commit()
    await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()


@router.callback_query(F.data == 'add_button')
async def add_button(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = (await state.get_data()).get('bot_id')
    await state.update_data(bot_id=bot_id)
    await call.message.edit_text(text='üîò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏:', reply_markup=builder_keyboard.create_button_type)


@router.callback_query(F.data.startswith('choose_button_type|'))
async def choose_button_type(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    button_type = call.data.split('|')[1]
    await state.update_data(button_type=button_type)
    await call.message.edit_text(text='‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 25 —Å–∏–º–≤–æ–ª–æ–≤):',
                                 reply_markup=builder_keyboard.back_to_bot)
    await state.set_state(states.NewBotState.button_text)


@router.message(StateFilter(states.NewBotState.button_text))
async def button_text(message: Message, session: AsyncSession, user: User, state: FSMContext):
    button_text = message.text
    await state.update_data(button_text=button_text)
    data = await state.get_data()
    bot_id = data.get('bot_id')
    button_type = data.get('button_type')
    if button_type == '0' or button_type == '1':
        await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:'
                             '<i>(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML –∏ {user} —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</i>'
                             '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ', reply_markup=builder_keyboard.back_to_bot, parse_mode='HTML')
        await state.set_state(states.NewBotState.button_answer)
    elif button_type == '2':
        await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:'
                             '<i>(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML –∏ {user} —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</i>', reply_markup=builder_keyboard.back_to_bot, parse_mode='HTML')
        await state.set_state(states.NewBotState.button_answer)
    elif button_type == '3':
        await message.answer('üîó –í–≤–µ–¥–∏—Ç–µ URL:', reply_markup=builder_keyboard.back_to_bot)
        await state.set_state(states.NewBotState.button_url)
    elif button_type == '4':
        type = 'üåê'
        async with session:
            bot = await session.get(Made_Bots, bot_id)
            buttons = json.loads(bot.buttons) if bot.buttons else []
            new_button = {
                'type': type,
                'text': button_text,
            }
            buttons.append(new_button)
            bot.buttons = json.dumps(buttons)
            await session.commit()
            await crud.copy_bot_data(bot.bot_id, bot.id)
            await message.answer('‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
            await state.clear()


@router.message(StateFilter(states.NewBotState.button_answer))
async def button_answer(message: Message, session: AsyncSession, user: User, state: FSMContext):
    type = None
    button_answer = message.caption if message.photo else message.text
    photo_path = None
    if message.photo:
        file_id = message.photo[-1].file_id
        file_info = await message.bot.get_file(file_id)
        file_ext = file_info.file_path.split('.')[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        unique_filename = f"{uuid.uuid4()}.{file_ext}"
        photo_path = os.path.join(PHOTO_DIR, unique_filename)

        await message.bot.download_file(file_info.file_path, photo_path)
    await state.update_data(button_answer=button_answer)
    data = await state.get_data()
    bot_id = data.get('bot_id')
    button_type = data.get('button_type')
    if button_type == '0':
        type = 'üí¨'
    elif button_type == '1':
        type = '‚úèÔ∏è'
    elif button_type == '2':
        type = 'üîî'
    button_text = data.get('button_text')
    button_answer = data.get('button_answer')
    async with session:
        bot = await session.get(Made_Bots, bot_id)
        buttons = json.loads(bot.buttons) if bot.buttons else []
        new_button = {
            'type': type,
            'text': button_text,
            'answer': button_answer,
            'photo': photo_path
        }
        buttons.append(new_button)
        bot.buttons = json.dumps(buttons)
        await session.commit()
        await crud.copy_bot_data(bot.bot_id, bot.id)
        await message.answer('‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
        await state.clear()


@router.message(StateFilter(states.NewBotState.button_url))
async def button_url(message: Message, session: AsyncSession, user: User, state: FSMContext):
    type = 'üîó'
    button_url = message.text
    await state.update_data(button_url=button_url)
    data = await state.get_data()
    bot_id = data.get('bot_id')
    button_type = data.get('button_type')
    if button_type == '3':
        type = 'üîó'
    button_text = data.get('button_text')
    button_url = data.get('button_url')
    async with session:
        bot = await session.get(Made_Bots, bot_id)
        buttons = json.loads(bot.buttons) if bot.buttons else []
        new_button = {
            'type': type,
            'text': button_text,
            'url': button_url
        }
        buttons.append(new_button)
        bot.buttons = json.dumps(buttons)
        await session.commit()
        await crud.copy_bot_data(bot.bot_id, bot.id)
        await message.answer('‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
        await state.clear()


@router.callback_query(F.data == 'delete_all')
async def delete_all_buttons(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = (await state.get_data()).get('bot_id')
    await state.update_data(bot_id=bot_id)
    async with session:
        bot = await session.get(Made_Bots, bot_id)
        bot.buttons = None
        await session.commit()
        await crud.copy_bot_data(bot.bot_id, bot.id)
        await call.message.edit_text('‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã!', reply_markup=main_keyboard.main_menu)
        await state.clear()


@router.callback_query(F.data == 'referral_program_bot')
async def referral_program_bot(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = (await state.get_data()).get('bot_id')
    async with session:
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()
        if bot_made.is_referal:
            status = '‚úÖ –í–∫–ª—é—á–µ–Ω–∞'
        else:
            status = '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'
        kb = await builder_keyboard.get_referal_settings_kb(bot_made)
    await call.message.edit_text(text='üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã\n'
                                      ' ‚îî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ–≥–¥–∞ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n\n'
                                      '‚öôÔ∏è\n'
                                      f' ‚îî –°—Ç–∞—Ç—É—Å: {status}',
                                 reply_markup=kb)


@router.callback_query(F.data.startswith('switch_referal|'))
async def switch_referal(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = (await state.get_data()).get('bot_id')
    await state.update_data(bot_id=bot_id)
    callback = call.data.split('|')[1]
    async with session:
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()
        if callback == 'on':
            bot_made.is_referal = True
            await session.commit()
            await call.message.edit_text('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
        elif callback == 'off':
            bot_made.is_referal = False
            await session.commit()
            await call.message.edit_text('‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
        await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
        await state.clear()


@router.callback_query(F.data.startswith('bot_run_mailing|'))
async def bot_start_mailin(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)
    await call.message.answer(text='üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF.'
                                   '<i>(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)</i>\n\n'
                                   'üîÑ –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n\n'
                                   'üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: \n'
                                   ' ‚îî {first_name} - –∏–º—è\n'
                                   ' ‚îî {last_name} - —Ñ–∞–º–∏–ª–∏—è  \n'
                                   ' ‚îî {username} - —é–∑–µ—Ä–Ω–µ–π–º –±–µ–∑ @\n'
                                   ' ‚îî {@username} - —é–∑–µ—Ä–Ω–µ–π–º —Å @\n'
                                   ' ‚îî {telegram_id} - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
                                   'üé≤ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n'
                                   ' ‚îî {random(x,y)} - —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç x –¥–æ y\n'
                                   ' ‚îî {1: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ} - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 1\n'
                                   ' ‚îî {2: ^1 * 2} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 1\n\n'
                                   'üìã –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n'
                                   "<code>You won {1: random(5,10)} TON (${2: ^1 * ton})! If price doubles tomorrow, you'll have ${3: ^2 * 2}! Want to try your luck again? You have {4: random(1,3)} attempts left. -> You won 8 TON ($46.04)! If price doubles tomorrow, you'll have $92.08! Want to try your luck again? You have 2 attempts left.</code>"
                                   "\n\n<i>*–ü—É—Å—Ç—ã–µ –ø–æ–ª—è –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É</i>", parse_mode='HTML')
    await state.set_state(states.BotMailing.mailing_text)


@router.message(StateFilter(states.BotMailing.mailing_text))
async def mailing_set_text(message: Message, state: FSMContext, session: AsyncSession):
    mailing_text = message.text
    await state.update_data(mailing_text=mailing_text)
    await message.answer(text='üîò –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω.'
                              '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç + URL] –∏–ª–∏ [—Ç–µ–∫—Å—Ç + <code>webapp</code>].'
                              '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.\n'
                              '<i>P.S. Webapp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –≤–µ–±–∞–ø–ø —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–æ–º–µ–Ω–æ–º</i>',
                         parse_mode='HTML', reply_markup=builder_keyboard.mailing_skip_buttons)
    await state.set_state(states.BotMailing.mailing_buttons)


@router.message(StateFilter(states.BotMailing.mailing_buttons))
async def mailing_set_buttons(message: Message, state: FSMContext, session: AsyncSession):
    mailing_buttons = message.text
    await state.update_data(mailing_buttons=mailing_buttons)
    data = await state.get_data()
    bot_id = data.get('bot_id')
    mailing_text = data.get('mailing_text')

    async with session:
        bot = await session.get(Made_Bots, bot_id)

        if bot:  # Check if bot exists
            mailing = Mailing(  # Create a new Mailing object
                mailing_text=mailing_text,
                mailing_buttons=mailing_buttons,
                bot_id=bot.id  # Associate with the Made_Bots object
            )

            session.add(mailing)  # Add the new Mailing object to the session
            await session.commit()
            await message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫:',
                                 reply_markup=builder_keyboard.mailing_confirm_launch)


@router.callback_query(F.data == 'mailing_skip_buttons')
async def mailing_skip_buttons(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    if call.data == 'mailing_skip_buttons':
        data = await state.get_data()
        bot_id = data.get('bot_id')
        mailing_text = data.get('mailing_text')

        async with session:
            bot = await session.get(Made_Bots, bot_id)

            if bot:  # Check if bot exists
                mailing = Mailing(  # Create a new Mailing object
                    mailing_text=mailing_text,
                    mailing_buttons=None,
                    made_bots=bot  # Associate with the Made_Bots object
                )

                session.add(mailing)  # Add the new Mailing object to the session
                await session.commit()
                await call.message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?',
                                          reply_markup=builder_keyboard.mailing_confirm_launch)
            else:
                await call.message.answer("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")  # Handle the case where the bot doesn't exis


@router.callback_query(F.data == 'mailing_confirm_launch' or 'mailing_confirm_cancel')
async def mailing_confirm_launch(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    if call.data == 'mailing_confirm_launch':
        data = await state.get_data()
        bot_id = data.get('bot_id')
        bot_made = await session.get(Made_Bots, bot_id)
        mailing_text = data.get('mailing_text')
        mailing_buttons = data.get('mailing_buttons')
        mailing_interval = None
        is_mailing = True
        async with session:
            mailing = Mailing(mailing_text=mailing_text, mailing_buttons=mailing_buttons, made_bots=bot_made,
                              interval=mailing_interval, is_mailing=is_mailing)
            session.add(mailing)
            await session.commit()
            await session.refresh(mailing)
            bot_made = await session.get(Made_Bots, bot_id)
            if bot_made:
                if not bot_made.is_working:
                    await call.message.edit_text('‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
                    await control_made_bot.send_mailing_to_other_bots(bot_made, mailing, session)
                    # await send_mailing_info(bot_made.bot_id, bot_made.bot_id, mailing_text, mailing_buttons, mailing_interval)
                    await call.message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
                    await state.clear()
                else:
                    await call.message.edit_text('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
                    await bot_start(bot_made)
                    await session.commit()
                    await asyncio.sleep(2)  # Wait for 5 seconds
                    await control_made_bot.send_mailing_to_other_bots(bot_made, mailing, session)
                    await call.message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
                    await state.clear()
            else:
                await call.message.answer("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")  # Handle the case where the bot doesn't exis
    elif call.data == 'mailing_confirm_cancel':
        await call.message.answer('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!')
        await state.clear()


@router.callback_query(F.data.startswith('bot_start_stop|'))
async def bot_start_stop(call: CallbackQuery, session: AsyncSession, user: User, bot: Bot, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)
    async with session:
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()
        if bot_made.is_working and bot_made.process is not None:
            try:
                async with session:
                    await stop_bot(bot_made)
                    await session.commit()
                    await load_bot_page(session, bot_id, bot, user)
                    await call.message.answer('‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
            except Exception as e:  # Handle if process is already gone
                async with session:
                    bot_made = await session.get(Made_Bots, bot_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
                    bot_made.is_working = False
                    bot_made.process = None
                    await session.commit()
                    await load_bot_page(session, bot_id, bot, user)
                await call.message.answer(f'–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}! –ë–æ—Ç –±—ã–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω')
        else:
            await bot_start(bot_made)
            await session.commit()
            async with session:
                new_bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
                new_bot = new_bot_query.scalars().first()
                keyboard = await builder_keyboard.get_bot_settings_kb(new_bot)
                # domain_query = await session.execute(select(Domains).where(Domains.id == new_bot.domain_id))
                # domain = domain_query.scalars().first()
                buttons_text = ""
                if new_bot.buttons:
                    try:
                        buttons_data = json.loads(new_bot.buttons)
                        for i, button in enumerate(buttons_data):
                            buttons_text += f"{button.get('text', '–ö–Ω–æ–ø–∫–∞')} ({button.get('type', 'text')})\n"
                    except json.JSONDecodeError:
                        buttons_text = "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫"
                else:
                    buttons_text = "–ö–Ω–æ–ø–æ–∫ –Ω–µ—Ç"

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                start_text = new_bot.start_message or "–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

                text = (f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {new_bot.bot_id}\n\n'
                        f'<b>ü§ñ –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{new_bot.bot_name}\n'
                        f'<b>üåê –î–æ–º–µ–Ω:</b> {new_bot.web_app_link}\n'
                        f'<b>üí¨ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ WebApp:</b> {new_bot.web_app_button}\n\n'
                        f'<b>üñ• –ö–Ω–æ–ø–∫–∏:</b> <pre>{buttons_text}</pre>\n\n'
                        f'<b>üìù–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b> <pre>{start_text}</pre>\n'
                        f'–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–∂–∏–º–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å!')

                await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            await call.message.answer('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
        await state.clear()


@router.callback_query(F.data.startswith('bot_delete|'))
async def bot_delete(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)
    await call.message.answer(text='–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞?',
                              reply_markup=builder_keyboard.delete_bot_choice)


@router.callback_query(F.data.startswith('delete_bot|'))
async def delete_bot(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    choice = call.data.split('|')[1]
    bot_id = (await state.get_data()).get('bot_id')
    if choice == 'yes':
        async with session:
            bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
            bot_made = bot_query.scalars().first()
            await session.delete(bot_made)
            await session.commit()
            await call.message.edit_text('‚úÖ –ë–æ—Ç —É–¥–∞–ª–µ–Ω!')
            await state.clear()
    elif choice == 'no':
        async with session:
            new_bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
            new_bot = new_bot_query.scalars().first()
            keyboard = await builder_keyboard.get_bot_settings_kb(new_bot)
            # domain_query = await session.execute(select(Domains).where(Domains.id == new_bot.domain_id))
            # domain = domain_query.scalars().first()
            buttons_text = ""
            if new_bot.buttons:
                try:
                    buttons_data = json.loads(new_bot.buttons)
                    for i, button in enumerate(buttons_data):
                        buttons_text += f"{button.get('text', '–ö–Ω–æ–ø–∫–∞')} ({button.get('type', 'text')})\n"
                except json.JSONDecodeError:
                    buttons_text = "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫"
            else:
                buttons_text = "–ö–Ω–æ–ø–æ–∫ –Ω–µ—Ç"

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            start_text = new_bot.start_message or "–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

            text = (f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {new_bot.bot_id}\n\n'
                    f'<b>ü§ñ –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{new_bot.bot_name}\n'
                    f'<b>üåê –î–æ–º–µ–Ω:</b> {new_bot.web_app_link}\n'
                    f'<b>üí¨ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ WebApp:</b> {new_bot.web_app_button}\n\n'
                    f'<b>üñ• –ö–Ω–æ–ø–∫–∏:</b> <pre>{buttons_text}</pre>\n\n'
                    f'<b>üìù–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b> <pre>{start_text}</pre>\n'
                    f'–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–∂–∏–º–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å!')

            await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


async def update_bot_menu(bot: Bot, add_webapp: bool):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –±–æ—Ç–∞: –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É WebApp.

    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param add_webapp: –µ—Å–ª–∏ True ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç WebApp, –∏–Ω–∞—á–µ —É–±–∏—Ä–∞–µ—Ç
    """
    commands = []

    if add_webapp:
        commands.append(
            BotCommand(command="webapp", description="–û—Ç–∫—Ä—ã—Ç—å WebApp")
        )

    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())


@router.callback_query(F.data.startswith('bot_web_app_position|'))
async def bot_web_app_position(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext, bot: Bot):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)
    async with session:
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()
        if bot_made.web_app_position:
            bot_made.web_app_position = False
            await session.commit()
            if bot_made.is_working and bot_made.process is not None:
                await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
                await control_made_bot.switch_off_webapp(bot_made.bot_id, bot_made.web_app_button,
                                                         bot_made.web_app_link,
                                                         call.from_user.id, session)
                await load_bot_page(session, bot_id, bot, user)
            else:
                await bot_start(bot_made)
                await session.commit()
                await asyncio.sleep(3)
                await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
                await control_made_bot.switch_off_webapp(bot_made.bot_id, bot_made.web_app_button,
                                                         bot_made.web_app_link,
                                                         call.from_user.id, session)
                await load_bot_page(session, bot_id, bot, user)
                await stop_bot(bot_made)
                await session.commit()
            await call.message.answer('‚ùå WebApp –≤ —É–≥–ª—É –≤—ã–∫–ª—é—á–µ–Ω!', reply_markup=main_keyboard.main_menu)
        else:
            bot_made.web_app_position = True
            await session.commit()
            if bot_made.is_working and bot_made.process is not None:
                await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
                await control_made_bot.switch_on_webapp(bot_made.bot_id, bot_made.web_app_button,
                                                        bot_made.web_app_link,
                                                        call.from_user.id, session)
                await load_bot_page(session, bot_id, bot, user)
            else:
                await bot_start(bot_made)
                await session.commit()
                await asyncio.sleep(3)
                await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
                await control_made_bot.switch_on_webapp(bot_made.bot_id, bot_made.web_app_button,
                                                        bot_made.web_app_link,
                                                        call.from_user.id, session)
                await load_bot_page(session, bot_id, bot, user)
                await stop_bot(bot_made)
                await session.commit()
            await call.message.answer('‚úÖ WebApp –≤ —É–≥–ª—É –≤–∫–ª—é—á–µ–Ω!', reply_markup=main_keyboard.main_menu)
        await state.clear()


@router.callback_query(F.data.startswith('bot_web_app_text|'))
async def bot_web_app_text(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)
    kb = await builder_keyboard.get_back_to_bot_settings(bot_id)
    await call.message.answer('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ WebApp (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤):',
                              reply_markup=kb)
    await state.set_state(states.NewBotState.web_app_text)


@router.message(StateFilter(states.NewBotState.web_app_text))
async def web_app_text(message: Message, session: AsyncSession, user: User, state: FSMContext):
    web_app_text = message.text
    await state.update_data(web_app_text=web_app_text)
    data = await state.get_data()
    bot_id = data.get('bot_id')
    await message.answer('–ú–µ–Ω—è—é —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ WebApp', reply_markup=main_keyboard.main_menu)
    async with session:
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()
        bot_made.web_app_button = web_app_text
        await session.commit()
        await session.refresh(bot_made)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
        print(f"Updated web_app_button: {bot_made.web_app_button}")
        if bot_made.is_working and bot_made.process is not None:
            await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
            await control_made_bot.switch_on_webapp(bot_made.bot_id, bot_made.web_app_button, bot_made.web_app_link,
                                                    message.from_user.id, session)
            await message.answer('‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ WebApp –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=main_keyboard.main_menu)
            await state.clear()
        else:
            await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
            await bot_start(bot_made)
            await session.commit()
            await asyncio.sleep(3)
            await control_made_bot.switch_on_webapp(bot_made.bot_id, bot_made.web_app_button, bot_made.web_app_link,
                                                    message.from_user.id, session)
            await stop_bot(bot_made)
            await session.commit()
            await message.answer('‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ WebApp –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=main_keyboard.main_menu)
            await state.clear()


@router.callback_query(F.data.startswith('bot_change_domain|'))
async def bot_change_domain(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)
    await call.message.edit_text('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è WebApp')
    await state.set_state(states.NewBotState.change_web_app_link)


@router.message(StateFilter(states.NewBotState.change_web_app_link))
async def change_web_app_link(message: Message, session: AsyncSession, user: User, state: FSMContext):
    web_app_link = message.text
    await state.update_data(web_app_link=web_app_link)
    data = await state.get_data()
    bot_id = data.get('bot_id')
    async with session:
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()
        bot_made.web_app_link = web_app_link
        await session.commit()
        await session.refresh(bot_made)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
        print(f"Updated web_app_button: {bot_made.web_app_link}")
        if bot_made.is_working and bot_made.process is not None:
            await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
            await control_made_bot.switch_on_webapp(bot_made.bot_id, bot_made.web_app_button, bot_made.web_app_link,
                                                    message.from_user.id, session)
            await message.answer('‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è WebApp –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
            await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
            await state.clear()
        else:
            await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
            await bot_start(bot_made)
            await session.commit()
            await asyncio.sleep(3)
            await control_made_bot.switch_on_webapp(bot_made.bot_id, bot_made.web_app_button, bot_made.web_app_link,
                                                    message.from_user.id, session)
            await message.answer('‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è WebApp –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
            await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
            await stop_bot(bot_made)
            await session.commit()
            await state.clear()


@router.callback_query(F.data == 'back_to_bot_menu')
async def back_to_bot_menu(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    data = await state.get_data()
    bot_id = data.get('bot_id')
    async with session:
        new_bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        new_bot = new_bot_query.scalars().first()
        keyboard = await builder_keyboard.get_bot_settings_kb(new_bot)
        # domain_query = await session.execute(select(Domains).where(Domains.id == new_bot.domain_id))
        # domain = domain_query.scalars().first()
        buttons_text = ""
        if new_bot.buttons:
            try:
                buttons_data = json.loads(new_bot.buttons)
                for i, button in enumerate(buttons_data):
                    buttons_text += f"{button.get('text', '–ö–Ω–æ–ø–∫–∞')} ({button.get('type', 'text')})\n"
            except json.JSONDecodeError:
                buttons_text = "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫"
        else:
            buttons_text = "–ö–Ω–æ–ø–æ–∫ –Ω–µ—Ç"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        start_text = new_bot.start_message or "–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        text = (f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {new_bot.bot_id}\n\n'
                f'<b>ü§ñ –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{new_bot.bot_name}\n'
                f'<b>üåê –î–æ–º–µ–Ω:</b> {new_bot.web_app_link}\n'
                f'<b>üí¨ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ WebApp:</b> {new_bot.web_app_button}\n\n'
                f'<b>üñ• –ö–Ω–æ–ø–∫–∏:</b> <pre>{buttons_text}</pre>\n\n'
                f'<b>üìù–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b> <pre>{start_text}</pre>\n'
                f'–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–∂–∏–º–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å!')

        await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data.startswith('bot_update|'))
async def bot_update(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)

    async with session:
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()
        await crud.copy_bot_data(bot_made.bot_id, bot_made.id)

        await call.message.answer('–û–±–Ω–æ–≤–ª–µ–Ω–æ!')


@router.callback_query(F.data.startswith('bot_statistics|'))
async def bot_statistics(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)

    async with session:
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()

        if not bot_made:
            await call.message.edit_text("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        stats = await crud.get_user_statistics(bot_made.bot_name, bot_id)

        if stats:
            message = (
                "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
                f"‚îî üë• –í—Å–µ–≥–æ: <code>{stats.get('total', 0)}</code>\n"
                f"‚îî üìÖ –ú–µ—Å—è—Ü: <code>{stats.get('month', 0)}</code>\n"
                f"‚îî üìÜ –ù–µ–¥–µ–ª—è: <code>{stats.get('week', 0)}</code>\n"
                f"‚îî üóì –î–µ–Ω—å: <code>{stats.get('day', 0)}</code>\n"
                f"‚îî üïê –ß–∞—Å: <code>{stats.get('hour', 0)}</code>\n"
                f"‚îî ‚è±Ô∏è 15 –º–∏–Ω: <code>{stats.get('fifteen_min', 0)}</code>"
            )
        else:
            message = (
                "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
                "‚îî üë• –í—Å–µ–≥–æ: <code>0</code>\n"
                "‚îî üìÖ –ú–µ—Å—è—Ü: <code>0</code>\n"
                "‚îî üìÜ –ù–µ–¥–µ–ª—è: <code>0</code>\n"
                "‚îî üóì –î–µ–Ω—å: <code>0</code>n"
                "‚îî üïê –ß–∞—Å: <code>0</code>\n"
                "‚îî ‚è±Ô∏è 15 –º–∏–Ω: <code>0</code>"
            )
        kb = await builder_keyboard.get_back_to_bot_settings(bot_id)
        await call.message.edit_text(message, parse_mode="HTML", reply_markup=kb)
        await state.clear()


@router.callback_query(F.data.startswith('back_to_bot_settings|'))
async def back_to_bot_settings(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = call.data.split('|')[1]
    async with session:
        new_bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        new_bot = new_bot_query.scalars().first()
        keyboard = await builder_keyboard.get_bot_settings_kb(new_bot)
        # domain_query = await session.execute(select(Domains).where(Domains.id == new_bot.domain_id))
        # domain = domain_query.scalars().first()
        buttons_text = ""
        if new_bot.buttons:
            try:
                buttons_data = json.loads(new_bot.buttons)
                for i, button in enumerate(buttons_data):
                    buttons_text += f"{button.get('text', '–ö–Ω–æ–ø–∫–∞')} ({button.get('type', 'text')})\n"
            except json.JSONDecodeError:
                buttons_text = "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫"
        else:
            buttons_text = "–ö–Ω–æ–ø–æ–∫ –Ω–µ—Ç"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        start_text = new_bot.start_message or "–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        text = (f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {new_bot.bot_id}\n\n'
                f'<b>ü§ñ –Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{new_bot.bot_name}\n'
                f'<b>üåê –î–æ–º–µ–Ω:</b> {new_bot.web_app_link}\n'
                f'<b>üí¨ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ WebApp:</b> {new_bot.web_app_button}\n\n'
                f'<b>üñ• –ö–Ω–æ–ø–∫–∏:</b> <pre>{buttons_text}</pre>\n\n'
                f'<b>üìù–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b> <pre>{start_text}</pre>\n'
                f'–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–∂–∏–º–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å!')

        await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data.startswith('bot_export_db|'))
async def bot_export_db(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)

    async with session:
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()

        if not bot_made:
            await call.message.edit_text("–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        bot_name = bot_made.bot_name
        db_path = f"bot_database_{bot_name}.db"

        try:
            db_file = FSInputFile(db_path)  # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            await call.message.answer_document(db_file, caption=f"üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {bot_name}")
        except Exception as e:
            await call.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    await state.clear()


@router.callback_query(F.data.startswith('bot_change_name|'))
async def bot_change_name_callback(call: CallbackQuery, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)

    await call.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞:")
    await state.set_state(states.NewBotState.new_bot_name)


@router.message(states.NewBotState.new_bot_name)
async def bot_change_name_message(message: Message, session: AsyncSession, state: FSMContext, bot: Bot, user: User):
    data = await state.get_data()
    bot_id = data.get("bot_id")
    new_name = message.text.strip()

    async with session.begin():
        bot_query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        bot_made = bot_query.scalars().first()

        if not bot_made:
            await message.answer("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        bot_made.bot_name = new_name
        await session.commit()

    await message.answer(f"‚úÖ –ò–º—è –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{new_name}</b>", parse_mode="HTML")
    await crud.copy_bot_data(bot_made.bot_id, bot_made.id)
    await load_bot_page(session, bot_id, bot, user)
    await state.clear()


@router.callback_query(F.data.startswith('bot_transfer_settings|'))
async def choose_source_bot(call: CallbackQuery, session: AsyncSession, user: User, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)
    async with session:
        bots_query = await session.execute(
            select(Made_Bots).where(Made_Bots.user_tg_id == user.tg_id, Made_Bots.id != bot_id)
        )
        bots = bots_query.scalars().all()

    if not bots:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞!", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=bot.bot_name, callback_data=f"confirm_transfer|{bot_id}|{bot.id}")]
            for bot in bots
        ]
    )

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ:", reply_markup=keyboard)


@router.callback_query(F.data.startswith('confirm_transfer|'))
async def transfer_data(call: CallbackQuery, session: AsyncSession, bot: Bot, user: User):
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ –¥—Ä—É–≥–æ–π"""
    _, source_bot_id, target_bot_id = call.data.split('|')

    async with session:
        source_bot = await session.get(Made_Bots, source_bot_id)
        target_bot = await session.get(Made_Bots, target_bot_id)
        if not source_bot or not target_bot:
            await call.answer("–û—à–∏–±–∫–∞! –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        target_bot.start_message = source_bot.start_message
        target_bot.buttons = source_bot.buttons
        target_bot.web_app_button = source_bot.web_app_button
        target_bot.web_app_position = source_bot.web_app_position
        target_bot.process = source_bot.process
        target_bot.web_app_link = source_bot.web_app_link
        target_bot.web_app_html = source_bot.web_app_html
        target_bot.is_referal = source_bot.is_referal

        # –ü–µ—Ä–µ–Ω–æ—Å —Ä–∞—Å—Å—ã–ª–æ–∫
        mailings_query = await session.execute(select(Mailing).where(Mailing.bot_id == source_bot_id))
        mailings = mailings_query.scalars().all()

        for mailing in mailings:
            new_mailing = Mailing(
                name=mailing.name,
                mailing_text=mailing.mailing_text,
                mailing_buttons=mailing.mailing_buttons,
                interval=mailing.interval,
                bot_id=target_bot.id
            )
            session.add(new_mailing)

        await session.commit()

    await call.message.edit_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã!")
    await load_bot_page(session, source_bot_id, bot, user)


class MailingTypeCallback(CallbackData, prefix="mailing"):
    type: str
    bot_id: str
    template_id: Optional[int] = None


def get_mailing_keyboard(current_type: str, bot_id: str, templates: list):
    builder = InlineKeyboardBuilder()

    if templates:  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω—ã
        for template in templates:
            if template.name:
                builder.button(
                    text=template.name,
                    callback_data=MailingTypeCallback(type="mailing", bot_id=bot_id, template_id=template.id).pack()
                )

    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω", callback_data=f"create_mailing|{bot_id}")

    if current_type == "one_time":
        builder.button(
            text="üîÑ –®–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏",
            callback_data=MailingTypeCallback(type="interval", bot_id=bot_id).pack()
        )
    else:
        builder.button(
            text="üîÑ –®–∞–±–ª–æ–Ω—ã —Ä–∞–∑–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏",
            callback_data=MailingTypeCallback(type="one_time", bot_id=bot_id).pack()
        )

    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_bot_settings|{bot_id}")
    builder.adjust(1)
    return builder.as_markup()


async def get_mailing_templates_text(session: AsyncSession, bot_id: str, mailing_type: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —à–∞–±–ª–æ–Ω–∞—Ö —Ä–∞—Å—Å—ã–ª–∫–∏."""

    if mailing_type == "one_time":
        mailing_type_text = "—Ä–∞–∑–æ–≤–æ–π"
        templates_query = await session.execute(
            select(Mailing).where(and_(Mailing.bot_id == bot_id, Mailing.interval.is_(None)))
        )
    elif mailing_type == "interval":
        mailing_type_text = "–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π"
        templates_query = await session.execute(
            select(Mailing).where(and_(Mailing.bot_id == bot_id, Mailing.interval.is_not(None)))
        )
    else:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏"

    templates = templates_query.scalars().all()
    templates_count = len(templates)
    total_templates = 8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤

    return f" –®–∞–±–ª–æ–Ω—ã {mailing_type_text} —Ä–∞—Å—Å—ã–ª–∫–∏\n" \
           f"–í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {templates_count}/{total_templates}\n\n" \
           f"–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:"


@router.callback_query(F.data.startswith('bot_mailing_templates|'))
async def bot_mailing_templates(call: types.CallbackQuery, session: AsyncSession, user, state):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)

    templates_one_time_query = await session.execute(
        select(Mailing).where(and_(Mailing.bot_id == bot_id, Mailing.interval.is_(None)))
    )
    templates_one_time = templates_one_time_query.scalars().all()

    text = await get_mailing_templates_text(session, bot_id, "one_time")
    await call.message.edit_text(text, reply_markup=get_mailing_keyboard("one_time", bot_id, templates_one_time))
    await call.answer()


@router.callback_query(MailingTypeCallback.filter(F.type == "one_time"))
async def show_one_time_mailing(callback: types.CallbackQuery, callback_data: MailingTypeCallback,
                                session: AsyncSession):
    templates_one_time_query = await session.execute(
        select(Mailing).where(and_(Mailing.bot_id == callback_data.bot_id, Mailing.interval.is_(None)))
    )
    templates_one_time = templates_one_time_query.scalars().all()

    text = await get_mailing_templates_text(session, callback_data.bot_id, "one_time")
    await callback.message.edit_text(text, reply_markup=get_mailing_keyboard("one_time", callback_data.bot_id,
                                                                             templates_one_time))
    await callback.answer()


@router.callback_query(MailingTypeCallback.filter(F.type == "interval"))
async def show_interval_mailing(callback: types.CallbackQuery, callback_data: MailingTypeCallback,
                                session: AsyncSession):
    templates_interval_query = await session.execute(
        select(Mailing).where(and_(Mailing.bot_id == callback_data.bot_id, Mailing.interval.is_not(None)))
    )
    templates_interval = templates_interval_query.scalars().all()

    text = await get_mailing_templates_text(session, callback_data.bot_id, "interval")
    await callback.message.edit_text(text, reply_markup=get_mailing_keyboard("interval", callback_data.bot_id,
                                                                             templates_interval))
    await callback.answer()


@router.callback_query(F.data.startswith('create_mailing|'))
async def create_mailing_template(call: types.CallbackQuery, state: FSMContext):
    bot_id = call.data.split('|')[1]
    await state.update_data(bot_id=bot_id)
    await call.message.answer(text='üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):\n\n'
                                   '<i>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω</i>', parse_mode='HTML')
    await state.set_state(states.BotMailing.new_mailing_name)


@router.message(StateFilter(states.BotMailing.new_mailing_name))
async def process_mailing_name(message: types.Message, state: FSMContext, session: AsyncSession):
    mailing_name = message.text
    await state.update_data(new_mailing_name=mailing_name)
    data = await state.get_data()
    bot_id = data.get("bot_id")
    async with session:
        query = await session.execute(select(Made_Bots).where(Made_Bots.id == bot_id))
        made_bot = query.scalars().first()
    kb = await builder_keyboard.get_bot_settings_kb(made_bot)
    await message.answer('üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF.'
                         '<i>(–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)</i>\n\n'
                         'üîÑ –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n\n'
                         'üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: \n'
                         ' ‚îî {first_name} - –∏–º—è\n'
                         ' ‚îî {last_name} - —Ñ–∞–º–∏–ª–∏—è  \n'
                         ' ‚îî {username} - —é–∑–µ—Ä–Ω–µ–π–º –±–µ–∑ @\n'
                         ' ‚îî {@username} - —é–∑–µ—Ä–Ω–µ–π–º —Å @\n'
                         ' ‚îî {telegram_id} - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
                         'üé≤ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n'
                         ' ‚îî {random(x,y)} - —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç x –¥–æ y\n'
                         ' ‚îî {1: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ} - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 1\n'
                         ' ‚îî {2: ^1 * 2} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 1\n\n'
                         'üìã –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n'
                         "<code>You won {1: random(5,10)} TON (${2: ^1 * ton})! If price doubles tomorrow, you'll have ${3: ^2 * 2}! Want to try your luck again? You have {4: random(1,3)} attempts left. -> You won 8 TON ($46.04)! If price doubles tomorrow, you'll have $92.08! Want to try your luck again? You have 2 attempts left.</code>"
                         "\n\n<i>*–ü—É—Å—Ç—ã–µ –ø–æ–ª—è –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É</i>", parse_mode='HTML')
    await state.set_state(states.BotMailing.new_mailing_text)


@router.message(StateFilter(states.BotMailing.new_mailing_text))
async def process_mailing_text(message: types.Message, state: FSMContext):
    mailing_text = message.text
    await state.update_data(new_mailing_text=mailing_text)

    await message.answer('üîò –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω.'
                         '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç + URL] –∏–ª–∏ [—Ç–µ–∫—Å—Ç + <code>webapp</code>].'
                         '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.\n'
                         '<i>P.S. Webapp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –≤–µ–±–∞–ø–ø —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–æ–º–µ–Ω–æ–º</i>', parse_mode='HTML')
    await state.set_state(states.BotMailing.new_mailing_buttons)


@router.message(StateFilter(states.BotMailing.new_mailing_buttons))
async def process_mailing_buttons(message: types.Message, state: FSMContext):
    mailing_buttons = message.text
    await state.update_data(new_mailing_buttons=mailing_buttons)

    await message.answer('‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 60 –¥–æ 2880): –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª, –ø–æ—Å—Ç–∞–≤—å—Ç–µ 0.')
    await state.set_state(states.BotMailing.new_mailing_interval)


@router.message(StateFilter(states.BotMailing.new_mailing_interval))
async def process_mailing_interval(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        interval = int(message.text)
        if interval == 0:
            interval = None
        elif interval < 60 or interval > 2880:
            await message.answer('‚ùó –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 60 –¥–æ 2880 –º–∏–Ω—É—Ç.')
            return
    except ValueError:
        await message.answer('‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.')
        return

    await state.update_data(new_mailing_interval=interval)

    # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_data = await state.get_data()
    mailing_name = user_data.get('new_mailing_name')
    mailing_text = user_data.get('new_mailing_text')
    mailing_buttons = user_data.get('new_mailing_buttons')
    mailing_interval = user_data.get('new_mailing_interval')
    bot_id = user_data.get('bot_id')

    async with session:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—å Mailing (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        new_mailing = Mailing(name=mailing_name, mailing_text=mailing_text, mailing_buttons=mailing_buttons,
                              interval=mailing_interval,
                              bot_id=bot_id)
        session.add(new_mailing)
        await session.commit()  # –∏–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π commit —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º async SQLAlchemy

        await message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.')
        await state.clear()


@router.callback_query(F.data.startswith("mailing"))
async def handle_template_callback(call: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot, user: User):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    callback_data = call.data.split(":")

    if len(callback_data) != 4:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    action, _, bot_id, template_id = callback_data  # `_` ‚Äî —Ç–∞–∫ –∫–∞–∫ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ 'mailing'

    try:
        bot_id = int(bot_id)
        template_id = int(template_id)
    except ValueError:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    mailing_template_query = await session.execute(
        select(Mailing).where(Mailing.id == template_id)
    )
    mailing_template = mailing_template_query.scalars().first()

    if not mailing_template:
        await call.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    buttons_text = 'üîò –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∏' if mailing_template.mailing_buttons else 'üîò –ö–Ω–æ–ø–æ–∫ –Ω–µ—Ç'
    interval_text = mailing_template.interval if mailing_template.interval else 'üîò –ù–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞'

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–º
    keyboard = await builder_keyboard.get_template_settings_kb(mailing_template, bot_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    new_text = (
        f'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–º\n\n'
        f'üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {mailing_template.name}\n'
        f'{buttons_text}\n\n'
        f'–¢–µ–∫—Å—Ç: {mailing_template.mailing_text}\n'
        f'–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n'
        f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    )

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if call.message.text != new_text or call.message.reply_markup != keyboard:
        await bot.send_message(call.from_user.id, text=new_text, reply_markup=keyboard)
    else:
        await call.answer("–ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ.")


@router.callback_query(F.data.startswith("template_text|"))
async def template_change_text(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    template_id = call.data.split("|")[1]
    await state.update_data(template_id=template_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞:")
    await state.set_state(states.BotMailing.change_mailing_text)


@router.message(StateFilter(states.BotMailing.change_mailing_text))
async def change_mailing_text(message: types.Message, state: FSMContext, session: AsyncSession):
    new_text = message.text
    user_data = await state.get_data()
    template_id = user_data.get('template_id')

    async with session:
        mailing_template_query = await session.execute(
            select(Mailing).where(Mailing.id == template_id)
        )
        mailing_template = mailing_template_query.scalars().first()

        if not mailing_template:
            await message.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        mailing_template.mailing_text = new_text
        await session.commit()

        await message.answer("–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞  —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
        await state.clear()


@router.callback_query(F.data.startswith("template_buttons|"))
async def template_change_buttons(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    template_id = call.data.split("|")[1]
    await state.update_data(template_id=template_id)
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç + URL] –∏–ª–∏ [—Ç–µ–∫—Å—Ç + <code>webapp</code>].'
                              '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.\n'
                              '<i>P.S. Webapp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –≤–µ–±–∞–ø–ø —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–æ–º–µ–Ω–æ–º</i>',
                              parse_mode='HTML')
    await state.set_state(states.BotMailing.change_mailing_buttons)


@router.message(StateFilter(states.BotMailing.change_mailing_buttons))
async def change_mailing_buttons(message: types.Message, state: FSMContext, session: AsyncSession):
    new_buttons = message.text
    user_data = await state.get_data()
    template_id = user_data.get('template_id')

    async with session:
        mailing_template_query = await session.execute(
            select(Mailing).where(Mailing.id == template_id)
        )
        mailing_template = mailing_template_query.scalars().first()

        if not mailing_template:
            await message.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        mailing_template.mailing_buttons = new_buttons
        await session.commit()

        await message.answer("–ö–Ω–æ–ø–∫–∏ —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.")
        await state.clear()


@router.callback_query(F.data.startswith("template_interval|"))
async def template_change_interval(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    template_id = call.data.split("|")[1]
    await state.update_data(template_id=template_id)
    await call.message.answer(
        '‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 60 –¥–æ 2880): –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª, –ø–æ—Å—Ç–∞–≤—å—Ç–µ 0.')
    await state.set_state(states.BotMailing.change_mailing_interval)


@router.message(StateFilter(states.BotMailing.change_mailing_interval))
async def change_mailing_interval(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        new_interval = int(message.text)
        if new_interval == 0:
            interval = None
        elif new_interval < 60 or new_interval > 2880:
            await message.answer('‚ùó –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 60 –¥–æ 2880 –º–∏–Ω—É—Ç.')
            return
    except ValueError:
        await message.answer('‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.')
        return
    user_data = await state.get_data()
    template_id = user_data.get('template_id')

    async with session:
        mailing_template_query = await session.execute(
            select(Mailing).where(Mailing.id == template_id)
        )
        mailing_template = mailing_template_query.scalars().first()

        if not mailing_template:
            await message.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        mailing_template.interval = new_interval
        await session.commit()

        await message.answer("–ò–Ω—Ç–µ—Ä–≤–∞–ª —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
        await state.clear()


@router.callback_query(F.data.startswith("template_name|"))
async def template_change_name(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    template_id = call.data.split("|")[1]
    await state.update_data(template_id=template_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:")
    await state.set_state(states.BotMailing.change_mailing_name)


@router.message(StateFilter(states.BotMailing.change_mailing_name))
async def change_mailing_name(message: types.Message, state: FSMContext, session: AsyncSession):
    new_name = message.text
    user_data = await state.get_data()
    template_id = user_data.get('template_id')

    async with session:
        mailing_template_query = await session.execute(
            select(Mailing).where(Mailing.id == template_id)
        )
        mailing_template = mailing_template_query.scalars().first()

        if not mailing_template:
            await message.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        mailing_template.name = new_name
        await session.commit()

        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
        await state.clear()


@router.callback_query(F.data.startswith("template_start|"))
async def start_template_mailing(call: CallbackQuery, session: AsyncSession, state: FSMContext, user: User, bot: Bot):
    data = await state.get_data()
    bot_id = data.get('bot_id')
    template_id = call.data.split("|")[1]
    async with session:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        mailing_template_query = await session.execute(
            select(Mailing).where(Mailing.id == template_id)
        )
        mailing_template = mailing_template_query.scalars().first()

        if mailing_template:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ is_mailing –Ω–∞ True
            mailing_template.is_mailing = True
            await session.commit()  # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await session.refresh(mailing_template)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
            buttons_text = 'üîò –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∏' if mailing_template.mailing_buttons else 'üîò –ö–Ω–æ–ø–æ–∫ –Ω–µ—Ç'
            interval_text = mailing_template.interval if mailing_template.interval else 'üîò –ù–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞'

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–º
            keyboard = await builder_keyboard.get_template_settings_kb(mailing_template, bot_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            new_text = (
                f'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–º\n\n'
                f'üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {mailing_template.name}\n'
                f'{buttons_text}\n\n'
                f'–¢–µ–∫—Å—Ç: {mailing_template.mailing_text}\n'
                f'–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n'
                f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
            )
        await call.message.edit_text(text=new_text, reply_markup=keyboard)
        async with session:
            bot_made = await session.get(Made_Bots, bot_id)
            if bot_made.is_working and bot_made.process is not None:
                await call.message.answer('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
                response_task = asyncio.create_task(
                    control_made_bot.send_mailing_to_other_bots(bot_made, mailing_template, session))
                await state.update_data(mailing_task=response_task)
                await load_bot_page(session, bot_made.bot_id, bot, user)
                await call.message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
            else:
                await call.message.answer('‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫—ã')
                await bot_start(bot_made)
                await session.commit()
                await asyncio.sleep(3)  # Wait for 5 seconds
                response_task = asyncio.create_task(
                    control_made_bot.send_mailing_to_other_bots(bot_made, mailing_template, session))
                await state.update_data(mailing_task=response_task)
                await load_bot_page(session, bot_made.bot_id, bot, user)
                await call.message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!', reply_markup=main_keyboard.main_menu)
        await call.answer("–†–∞—Å—Å—ã–ª–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞.")


@router.callback_query(F.data.startswith("template_stop|"))
async def stop_template_mailing(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    template_id = call.data.split("|")[1]
    mailing_template_query = await session.execute(
        select(Mailing).where(Mailing.id == template_id)
    )
    mailing_template = mailing_template_query.scalars().first()
    data = await state.get_data()
    bot_id = data.get('bot_id')
    if mailing_template:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ is_mailing –Ω–∞ False
        mailing_template.is_mailing = False
        await session.commit()  # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await session.refresh(mailing_template)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        buttons_text = 'üîò –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∏' if mailing_template.mailing_buttons else 'üîò –ö–Ω–æ–ø–æ–∫ –Ω–µ—Ç'
        interval_text = mailing_template.interval if mailing_template.interval else 'üîò –ù–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞'

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–º
        keyboard = await builder_keyboard.get_template_settings_kb(mailing_template, bot_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        new_text = (
            f'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–º\n\n'
            f'üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {mailing_template.name}\n'
            f'{buttons_text}\n\n'
            f'–¢–µ–∫—Å—Ç: {mailing_template.mailing_text}\n'
            f'–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_text}\n'
            f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
        )
        await call.message.edit_text(text=new_text, reply_markup=keyboard)
    data = await state.get_data()
    bot_id = data.get('bot_id')
    try:
        data = await state.get_data()
        mailing_task = data.get("mailing_task")  # –ü–æ–ª—É—á–∞–µ–º Task

        if mailing_task and not mailing_task.done():
            mailing_task.cancel()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
            await call.message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await call.message.answer("üö´ –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
