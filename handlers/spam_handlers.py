import asyncio
import logging
import os
import time
from pathlib import Path
from datetime import datetime
import uuid
from pyrogram import Client as PyroClient
from pyrogram.raw.functions.chatlists import CheckChatlistInvite
import aiofiles
from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from pyrogram.raw.types import PeerChannel, PeerChat, PeerUser
from sqlalchemy.ext.asyncio import AsyncSession
from telethon.tl.functions.channels import GetChannelsRequest
from telethon.tl.types import MessageEntityCustomEmoji
from telethon.tl.types import Chat, Channel
from telethon.types import ExportedChatlistInvite
from telethon import TelegramClient, functions
from telethon.errors import ChannelPrivateError, ChatGuestSendForbiddenError, SlowModeWaitError, PeerIdInvalidError, \
    ChatWriteForbiddenError, FloodWaitError, SessionPasswordNeededError, RPCError
from telethon.sessions import StringSession
from states import states
import config
from sqlalchemy import select
from database.models import User, Spammer, SessionData
from middlewares.user_middleware import AuthorizeMiddleware
from keyboards import spammer_parser_keyboard as kb

router = Router()  # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router.message.middleware(AuthorizeMiddleware())
router.callback_query.middleware(AuthorizeMiddleware())

logger = logging.getLogger(__name__)
SESSION_NAME = "tg_session"
task_storage_spam = {}
PHOTO_DIR = "photos"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
NAMES_FILE = Path("services/parser/names.txt")
ENDINGS_FILE = Path("services/parser/endings.txt")
active_clients = {}


class SpammerState(StatesGroup):
    waiting_for_message = State()
    waiting_for_delay = State()
    waiting_for_cycle_delay = State()


class AddSessionState(StatesGroup):
    api_id = State()
    api_hash = State()
    phone = State()
    code_callback = State()
    password = State()
    phone_for_delete = State()

    texts = {
        "AuthUser:api_id": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à api_id:",
        "AuthUser:api_hash": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à api_hash:",
        "AuthUser:phone": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "AuthUser:code_callback": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏:",
        "AuthUser:password": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å: ",
    }


class StartSpamStates(StatesGroup):
    message_type = State()
    message_edit = State()
    chat_type = State()
    chats_from_link = State()
    phone_for_chats = State()


@router.message(F.text == "üìù –°–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∞")
async def spammer_callback(message: Message, session: AsyncSession):
    result = await session.execute(select(Spammer).where(Spammer.user_tg_id == message.from_user.id))
    spammer = result.scalars().first()

    if not spammer:
        spammer = Spammer(user_tg_id=message.from_user.id)
        session.add(spammer)
        await session.commit()
    await message.answer("–í—ã –≤ —Å–ø–∞–º –º–µ–Ω—é\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.spammer_menu)


@router.callback_query(F.data == "spammer_delay")
async def spammer_delay_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    async with session:
        spammer_query = await session.execute(select(Spammer).where(Spammer.user_tg_id == callback.from_user.id))
        spammer = spammer_query.scalars().first()
    await callback.message.edit_text(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: <code>{spammer.message_delay} —Å–µ–∫</code>\n"
                                     f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: <code>{spammer.cycle_delay} —Å–µ–∫</code>\n\n"
                                     "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:",
                                     reply_markup=kb.back_to_spam_menu)
    await state.set_state(SpammerState.waiting_for_delay)


@router.message(SpammerState.waiting_for_delay)
async def process_new_spammer_delay(message: Message, state: FSMContext, session: AsyncSession):
    new_delay = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not new_delay.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    new_delay = int(new_delay)
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with session:
        spammer_query = await session.execute(select(Spammer).where(Spammer.user_tg_id == message.from_user.id))
        spammer = spammer_query.scalars().first()

        if spammer:
            spammer.message_delay = new_delay
            await session.commit()

    await message.answer(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_delay} —Å–µ–∫—É–Ω–¥.")
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
    await state.set_state(SpammerState.waiting_for_cycle_delay)


@router.message(SpammerState.waiting_for_cycle_delay)
async def process_new_spammer_delay(message: Message, state: FSMContext, session: AsyncSession):
    new_delay = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not new_delay.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    new_delay = int(new_delay)
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with session:
        spammer_query = await session.execute(select(Spammer).where(Spammer.user_tg_id == message.from_user.id))
        spammer = spammer_query.scalars().first()

        if spammer:
            spammer.cycle_delay = new_delay
            await session.commit()

    await message.answer(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_delay} —Å–µ–∫—É–Ω–¥.")
    await message.answer("–í—ã –≤ —Å–ø–∞–º –º–µ–Ω—é\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.spammer_menu)


@router.callback_query(F.data == 'add_session')
async def add_new_session(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏', parse_mode='HTML')
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await state.set_state(AddSessionState.phone)


@router.message(StateFilter(AddSessionState.phone))
async def process_phone_number(message: types.Message, state: FSMContext, session: AsyncSession):
    phone_number = message.text.strip()
    user_id = message.from_user.id

    if not phone_number.startswith("+") or not phone_number[1:].isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")
        return

    await state.update_data(phone_number=phone_number)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
    existing_session = await session.execute(
        select(SessionData).where(SessionData.phone == phone_number)
    )
    existing_session = existing_session.scalars().first()

    if existing_session:
        client = TelegramClient(
            StringSession(existing_session.session_string),
            config.api_id, config.api_hash,
            device_model="GNU/Linux 6.8.0-36-generic x86_64",
            system_version="Ubuntu 24.04 LTS",
            app_version="1.38.1"
        )
        await client.connect()
        if not await client.is_user_authorized():
            await message.answer("–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ, —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º –Ω–∏–∂–µ:")
            sent_code = await client.send_code_request(phone_number)
            await message.answer(AddSessionState.texts["AuthUser:code_callback"])
            active_clients[user_id] = client
            await state.update_data(phone_code_hash=sent_code.phone_code_hash)
            await state.set_state(AddSessionState.code_callback)
            return
        else:
            await state.update_data(phone_number=phone_number)
            await message.answer("–ù–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ—Å—Å–∏—è! –í—ã –∂–µ–ª–∞–µ—Ç–µ –µ—ë —É–¥–∞–ª–∏—Ç—å?",
                                 reply_markup=kb.delete_session)
            return
    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    client = TelegramClient(
        StringSession(), config.api_id, config.api_hash,
        device_model="GNU/Linux 6.8.0-36-generic x86_64",
        system_version="Ubuntu 24.04 LTS",
        app_version="1.38.1"
    )
    try:
        await client.connect()
        if not await client.is_user_authorized():
            sent_code = await client.send_code_request(phone_number)
            await message.answer(AddSessionState.texts["AuthUser:code_callback"])
            active_clients[user_id] = client
            await state.update_data(phone_code_hash=sent_code.phone_code_hash)
            await state.set_state(AddSessionState.code_callback)
            return
    except FloodWaitError as e:
        logger.error(f"FloodWaitError: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥.")
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {user_id}: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /auth.")
        await state.clear()


@router.message(AddSessionState.code_callback)
async def process_code(message: types.Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id
    code = message.text.strip()
    data = await state.get_data()
    phone_code_hash = data.get("phone_code_hash")
    phone_number = data.get("phone_number")
    client = active_clients.get(user_id)
    if client is None:
        logger.info(f"[INFO] –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (user_id: {user_id})")
        await message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await client.sign_in(phone=phone_number, code=code, phone_code_hash=phone_code_hash)
        logger.info(f"[INFO] user_id: {user_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session_string = client.session.save()
        async with session.begin():
            existing_session = await session.execute(
                select(SessionData).where(SessionData.phone == phone_number)
            )
            existing_session = existing_session.scalars().first()

            if existing_session:
                existing_session.session_string = session_string
            else:
                phone_number = str(phone_number)
                new_session = SessionData(phone=phone_number, session_string=session_string)
                session.add(new_session)

            await session.commit()

        new_message = await message.answer("–°–µ—Å—Å–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        await state.clear()
    except SessionPasswordNeededError:
        logger.info(f"[INFO] –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è user_id: {user_id}")
        await message.answer(AddSessionState.texts["AuthUser:password"])
        await state.set_state(AddSessionState.password)
    except Exception as e:
        if "The confirmation code has expired" in str(e):
            await message.answer("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {user_id}: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}")


@router.message(StateFilter(AddSessionState.password))
async def process_password(message: Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id
    password = message.text.strip()
    data = await state.get_data()
    phone_number = data.get("phone_number")

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    client = active_clients.get(user_id)

    if client is None:
        logger.info(f"[INFO] –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (user_id: {user_id})")
        await message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        del active_clients[user_id]
        await state.clear()
        return

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º
        await client.sign_in(password=password)
        logger.info(f"[INFO] user_id: {user_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É —Å –ø–∞—Ä–æ–ª–µ–º. ")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session_string = client.session.save()
        async with session:
            new_session = SessionData(phone=phone_number, session_string=session_string)
            session.add(new_session)
            await session.commit()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É! –í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        await state.clear()
        await client.disconnect()
    except Exception as e:
        if "The confirmation code has expired" in str(e):
            await message.answer("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –ø–∞—Ä–æ–ª–µ–º: {user_id}: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –ø–∞—Ä–æ–ª–µ–º: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        await client.disconnect()
        # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del active_clients[user_id]
        await state.clear()


@router.callback_query(F.data == 'delete_session')
async def delete_session(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–µ—Å—Å–∏—é")
    await state.set_state(AddSessionState.phone_for_delete)


@router.message(StateFilter(AddSessionState.phone_for_delete))
async def process_phone_number(message: types.Message, state: FSMContext, session: AsyncSession):
    phone_number = message.text.strip()
    if not phone_number.startswith("+") or not phone_number[1:].isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")
        return
    async with session.begin():
        existing_session = await session.execute(
            select(SessionData).where(SessionData.phone == phone_number)
        )
        existing_session = existing_session.scalars().first()

        if existing_session:
            await state.update_data(phone_number=phone_number)
            await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é?", reply_markup=kb.delete_session)
        else:
            await message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.")


@router.callback_query(F.data == 'session_delete_confirm')
async def delete_session_confirm(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    phone_number = data.get("phone_number")
    async with session.begin():
        existing_session = await session.execute(
            select(SessionData).where(SessionData.phone == phone_number)
        )
        existing_session = existing_session.scalars().first()

        if existing_session:
            await session.delete(existing_session)
            await session.commit()
            await call.message.answer("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await call.message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await state.clear()


@router.callback_query(F.data == "back_to_spam_menu")
async def back_to_spam_menu_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ã –≤ —Å–ø–∞–º –º–µ–Ω—é\n"
                                     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.spammer_menu)


@router.callback_query(F.data == "start_spam")
async def start_spam_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.start_spammer_menu)


@router.callback_query(F.data == 'manual_message')
async def manual_message_callback(call: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    await state.update_data(message_type='1')
    async with session:
        spammer_query = await session.execute(select(Spammer).where(Spammer.user_tg_id == call.from_user.id))
        spammer = spammer_query.scalars().first()
        if spammer:
            if spammer.message_photo:
                await bot.send_photo(call.from_user.id, FSInputFile(spammer.message_photo),
                                     caption=f"–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {spammer.message_text}", parse_mode='HTML')
            else:
                await bot.send_message(call.from_user.id, f"–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {spammer.message_text}",
                                       parse_mode='HTML')
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ) :")
        await state.set_state(StartSpamStates.message_edit)


@router.message(StateFilter(StartSpamStates.message_edit))
async def change_message(message: Message, state: StartSpamStates.message_edit, session: AsyncSession, bot: Bot):
    answer = message.caption if message.photo else message.text
    photo_path = None
    if message.photo:
        file_id = message.photo[-1].file_id
        file_info = await message.bot.get_file(file_id)
        file_ext = file_info.file_path.split('.')[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        unique_filename = f"{uuid.uuid4()}.{file_ext}"
        photo_path = os.path.join(PHOTO_DIR, unique_filename)
        await message.bot.download_file(file_info.file_path, photo_path)
    async with session:
        spammer_query = await session.execute(select(Spammer).where(Spammer.user_tg_id == message.from_user.id))
        spammer = spammer_query.scalars().first()
        spammer.message_text = answer
        spammer.message_photo = photo_path
        await session.commit()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=kb.choose_chats)


@router.callback_query(F.data == 'saved_message')
async def saved_message_callback(call: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    await state.update_data(message_type="2")
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=kb.choose_chats)


@router.callback_query(F.data == 'back_to_start_menu')
async def back_to_start_menu(call: CallbackQuery):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.start_spammer_menu)


@router.callback_query(F.data.startswith('chats|'))
async def chats_from_parser_callback(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    chat_type = call.data.split('|')[1]
    await state.update_data(chat_type=chat_type)
    data = await state.get_data()
    if chat_type == '1':
        with open("services/parser/output.txt", "r", encoding="utf-8") as file:
            chats = [line.strip() for line in file if line.strip()]
            await state.update_data(chats=chats)
            await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            await state.set_state(StartSpamStates.phone_for_chats)
    elif chat_type == '2':
        await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await state.set_state(StartSpamStates.phone_for_chats)
        return
    elif chat_type == '3':
        await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await state.set_state(StartSpamStates.phone_for_chats)
        return


async def get_chats_from_folder(client, folder_link: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –∏—Ö ID –∏–∑ Telegram-–ø–∞–ø–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ t.me/addlist/..."""
    folder_hash = folder_link.replace("https://t.me/addlist/", "").strip()
    chat_links = []
    chat_ids = []

    if not client.is_connected():
        await client.connect()

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API
        result = await client(functions.chatlists.CheckChatlistInviteRequest(slug=folder_hash))

        # –î–æ–±–∞–≤–ª—è–µ–º ID –∏–∑ missing_peers –∏ already_peers
        if hasattr(result, "missing_peers"):
            chat_ids.extend([peer.channel_id for peer in result.missing_peers])

        if hasattr(result, "already_peers"):
            chat_ids.extend([peer.channel_id for peer in result.already_peers])

        # –î–æ–±–∞–≤–ª—è–µ–º ID –∏–∑ chats
        if hasattr(result, "chats"):
            chat_ids.extend([chat.id for chat in result.chats])

        for chat_id in set(chat_ids):  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            try:
                channel = await client.get_entity(chat_id)
                if channel.username:
                    chat_link = f"https://t.me/{channel.username}"
                    chat_links.append(chat_link)
                else:
                    continue
            except Exception as e:
                logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
                continue

        return chat_links

    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —á–∞—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {e}")
        return []


async def get_group_chat_links(client):
    if not client.is_connected():
        await client.connect()
        dialogs = await client.get_dialogs()

        chat_links = []
        for dialog in dialogs:
            entity = dialog.entity
            if isinstance(entity, Chat):  # –û–±—ã—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                link = f"https://t.me/c/{entity.id}"
            elif isinstance(entity, Channel) and entity.megagroup:  # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
                link = f"https://t.me/{entity.username}" if entity.username else f"https://t.me/c/{entity.id}"
            else:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —á–∞—Ç–æ–≤

            chat_links.append(link)

        return chat_links


@router.message(StateFilter(StartSpamStates.phone_for_chats))
async def get_phone_for_chats(message: Message, state: FSMContext, session: AsyncSession):
    phone_number = message.text
    if not phone_number.startswith("+") or not phone_number[1:].isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +9991234567:")
        return
    await state.update_data(phone_number=phone_number)
    async with session:
        existing_session = await session.execute(
            select(SessionData).where(SessionData.phone == phone_number)
        )
        existing_session = existing_session.scalars().first()
        if existing_session:
            data = await state.get_data()
            chat_type = data.get("chat_type")
            message_type = data.get('message_type')
            if chat_type == '1':
                chats = data.get("chats")
                print(chats)
                await message.answer(text=f'<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:</b> –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é\n'
                                          f'<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:</b> –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —á–∞—Ç—ã\n'
                                          f'<b>–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ</b><code> {len(chats)} </code><b>—á–∞—Ç–æ–≤</b>',
                                     parse_mode='HTML', reply_markup=kb.confirm_start_spam)
            if chat_type == '2':
                await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ (https://t.me/addlist/):")
                await state.set_state(StartSpamStates.chats_from_link)
            elif chat_type == '3':
                client = TelegramClient(
                    StringSession(existing_session.session_string), config.api_id, config.api_hash,
                    device_model="GNU/Linux 6.8.0-36-generic x86_64",
                    system_version="Ubuntu 24.04 LTS",
                    app_version="1.38.1"
                )
                chats = await get_group_chat_links(client)
                await state.update_data(chats=chats)
                if message_type == '1':
                    message_type = '–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é'
                elif message_type == '2':
                    message_type = '–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
                await message.answer(text=f'<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {message_type}\n'
                                          f'<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:</b> –ß–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
                                          f'<b>–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ</b><code> {len(chats)} </code><b>—á–∞—Ç–æ–≤</b>',
                                     parse_mode='HTML', reply_markup=kb.confirm_start_spam)


@router.message(StateFilter(StartSpamStates.chats_from_link))
async def chats_from_link(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    link = message.text
    if not link.startswith("https://t.me/addlist/"):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    data = await state.get_data()
    phone_number = data.get("phone_number")
    message_type = data.get('message_type')
    async with session:
        existing_session = await session.execute(
            select(SessionData).where(SessionData.phone == phone_number)
        )
        existing_session = existing_session.scalars().first()
    client = TelegramClient(
        StringSession(existing_session.session_string), config.api_id, config.api_hash,
        device_model="GNU/Linux 6.8.0-36-generic x86_64",
        system_version="Ubuntu 24.04 LTS",
        app_version="1.38.1"
    )
    chats = await get_chats_from_folder(client, link)
    await state.update_data(chats=chats)
    chat_type = '2'
    await state.update_data(chat_type=chat_type)
    if message_type == '1':
        message_type = '–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é'
    elif message_type == '2':
        message_type = '–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
    await message.answer(text=f'<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {message_type}\n'
                              f'<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤:</b> –ß–∞—Ç—ã –∏–∑ –ø–∞–ø–∫–∏\n'
                              f'<b>–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ</b><code> {len(chats)} </code><b>—á–∞—Ç–æ–≤</b>',
                         parse_mode='HTML', reply_markup=kb.confirm_start_spam)


@router.callback_query(F.data == 'start_spamming')
async def start_spamming(call: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    message_text = None
    message_photo = None
    data = await state.get_data()
    phone_number = data.get("phone_number")
    print("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", phone_number)
    message_type = data.get('message_type')
    print("–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ", message_type)
    chats = data.get("chats")
    async with session:
        spammer_query = await session.execute(select(Spammer).where(Spammer.user_tg_id == call.from_user.id))
        spammer = spammer_query.scalars().first()
        existing_session = await session.execute(
            select(SessionData).where(SessionData.phone == phone_number)
        )
        existing_session = existing_session.scalars().first()

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ spammer –∏ existing_session —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if spammer and existing_session:
            client = TelegramClient(
                StringSession(existing_session.session_string), config.api_id, config.api_hash,
                device_model="GNU/Linux 6.8.0-36-generic x86_64",
                system_version="Ubuntu 24.04 LTS",
                app_version="1.38.1"
            )
        else:
            await call.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–ø–∞–º–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö

        user_id = call.from_user.id
        message_delay = spammer.message_delay
        cycle_delay = spammer.cycle_delay
        await call.message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É', reply_markup=kb.stop_spam)
        chat_id = call.message.message_id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if message_type == '1':
        message_text = spammer.message_text
        message_photo = spammer.message_photo if spammer.message_photo else None
    elif message_type == '2':
        message_text, message_photo = await get_last_saved_message(client)

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    spamming_task = asyncio.create_task(
        send_messages(client, message_text, message_photo, chats, cycle_delay, message_delay, bot, user_id, chat_id)
    )
    task_storage_spam[user_id] = spamming_task
    await state.clear()


def log_message(status, chat, message):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"[{now}] [{status}] –ß–∞—Ç: {chat} | –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    print(f"[{now}] [{status}] –ß–∞—Ç: {chat} | –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")




async def get_last_saved_message(client):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏."""
    async with client:
        messages = await client.get_messages("me", limit=1)
        if messages:
            msg = messages[0]
            text = msg.text if msg.text else ""
            photo = msg.media if msg.media else None

            if msg.entities:
                for entity in msg.entities:
                    if isinstance(entity, MessageEntityCustomEmoji):
                        emoji_id = entity.document_id
                        text += f" [Premium Emoji: {emoji_id}]"

            return text, photo
        return None, None


async def send_telegram_message(bot: Bot, chat_id: int, message: str, edit_message_id: int = None):
    kb = [
        [InlineKeyboardButton(text='‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='stop_spam')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    try:
        if edit_message_id:
            try:
                await bot.edit_message_text(chat_id=chat_id, message_id=edit_message_id, text=message,
                                            disable_web_page_preview=True, reply_markup=keyboard)
            except Exception as e:
                if "message can't be edited" in str(e):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await bot.send_message(chat_id=chat_id, text=message, disable_web_page_preview=True, reply_markup=keyboard)
                else:
                    raise e
        else:
            await bot.send_message(chat_id=chat_id, text=message, disable_web_page_preview=True, reply_markup=keyboard)
    except Exception as e:
        print(f"Error sending Telegram message: {e}")


async def send_messages(client, message_text, photo_path, chats, cycle_delay, message_delay, bot, user_id,
                        edit_message_id):
    if not client.is_connected():
        await client.connect()
        try:
            while True:
                for chat in chats:
                    try:
                        if message_text and photo_path:
                            await client.send_file(chat, photo_path, caption=message_text)
                            await send_telegram_message(bot, user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat}",
                                                        edit_message_id)
                        elif message_text:
                            await client.send_message(chat, message_text)
                            await send_telegram_message(bot, user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat}",
                                                        edit_message_id)
                        await asyncio.sleep(message_delay)
                    except ChannelPrivateError:
                        log_message("ERROR", chat, "–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç")
                    except ChatGuestSendForbiddenError:
                        log_message("ERROR", chat, "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π")
                        continue
                    except ChatWriteForbiddenError:
                        log_message("ERROR", chat, "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
                    except SlowModeWaitError:
                        log_message("SLOWMODE", chat, "–ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ slowmode")
                        continue
                    except PeerIdInvalidError:
                        log_message("ERROR", chat, "–ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        continue
                    except RPCError as e:
                        if "TOPIC_CLOSED" in str(e):
                            log_message("ERROR", chat, "–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç (TOPIC_CLOSED)")
                            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç
                        else:
                            continue  # –ü–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                    except Exception as e:
                        log_message("ERROR", chat, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                        continue
                print(f"[INFO] –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –û–∂–∏–¥–∞–Ω–∏–µ {cycle_delay} —Å–µ–∫—É–Ω–¥.")
                await asyncio.sleep(cycle_delay)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "stop_spam")
async def stop_spam_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        user_id = callback.from_user.id
        spamming_task = task_storage_spam[user_id]
        if spamming_task:
            spamming_task.cancel()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É
            await callback.message.answer("‚ùå –°–ø–∞–º —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await callback.message.answer("üö´ –°–ø–∞–º —Ä–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–ø–∞–º —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
